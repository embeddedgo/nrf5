// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52840

// Package ccm provides access to the registers of the CCM peripheral.
//
// Instances:
//  CCM  CCM_BASE  -  CCM_AAR*  AES CCM Mode Encryption
// Registers:
//  0x000 32  TASKS_KSGEN         Start generation of key-stream. This operation will stop by itself when completed.
//  0x004 32  TASKS_CRYPT         Start encryption/decryption. This operation will stop by itself when completed.
//  0x008 32  TASKS_STOP          Stop encryption/decryption
//  0x00C 32  TASKS_RATEOVERRIDE  Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any ongoing encryption/decryption
//  0x100 32  EVENTS_ENDKSGEN     Key-stream generation complete
//  0x104 32  EVENTS_ENDCRYPT     Encrypt/decrypt complete
//  0x108 32  EVENTS_ERROR        Deprecated register - CCM error event
//  0x200 32  SHORTS              Shortcuts between local events and tasks
//  0x304 32  INTENSET            Enable interrupt
//  0x308 32  INTENCLR            Disable interrupt
//  0x400 32  MICSTATUS           MIC check result
//  0x500 32  ENABLE              Enable
//  0x504 32  MODE                Operation mode
//  0x508 32  CNFPTR              Pointer to data structure holding AES key and NONCE vector
//  0x50C 32  INPTR               Input pointer
//  0x510 32  OUTPTR              Output pointer
//  0x514 32  SCRATCHPTR          Pointer to data area used for temporary storage
//  0x518 32  MAXPACKETSIZE       Length of key-stream generated when MODE.LENGTH = Extended.
//  0x51C 32  RATEOVERRIDE        Data rate override setting.
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package ccm

const (
	ENDKSGEN_CRYPT SHORTS = 0x01 << 0 //+ Shortcut between event ENDKSGEN and task CRYPT
	Disabled SHORTS = 0x00 << 0 //  Disable shortcut
	Enabled SHORTS = 0x01 << 0 //  Enable shortcut
)

const (
	ENDKSGEN_CRYPTn = 0
)

const (
	ENDKSGEN INTENSET = 0x01 << 0 //+ Write '1' to enable interrupt for event ENDKSGEN
	Disabled INTENSET = 0x00 << 0 //  Read: Disabled
	Enabled INTENSET = 0x01 << 0 //  Read: Enabled
	Set INTENSET = 0x01 << 0 //  Enable
	ENDCRYPT INTENSET = 0x01 << 1 //+ Write '1' to enable interrupt for event ENDCRYPT
	Disabled INTENSET = 0x00 << 1 //  Read: Disabled
	Enabled INTENSET = 0x01 << 1 //  Read: Enabled
	Set INTENSET = 0x01 << 1 //  Enable
	ERROR INTENSET = 0x01 << 2 //+ Deprecated intsetfield - Write '1' to enable interrupt for event ERROR
	Disabled INTENSET = 0x00 << 2 //  Read: Disabled
	Enabled INTENSET = 0x01 << 2 //  Read: Enabled
	Set INTENSET = 0x01 << 2 //  Enable
)

const (
	ENDKSGENn = 0
	ENDCRYPTn = 1
	ERRORn = 2
)

const (
	ENDKSGEN INTENCLR = 0x01 << 0 //+ Write '1' to disable interrupt for event ENDKSGEN
	Disabled INTENCLR = 0x00 << 0 //  Read: Disabled
	Enabled INTENCLR = 0x01 << 0 //  Read: Enabled
	Clear INTENCLR = 0x01 << 0 //  Disable
	ENDCRYPT INTENCLR = 0x01 << 1 //+ Write '1' to disable interrupt for event ENDCRYPT
	Disabled INTENCLR = 0x00 << 1 //  Read: Disabled
	Enabled INTENCLR = 0x01 << 1 //  Read: Enabled
	Clear INTENCLR = 0x01 << 1 //  Disable
	ERROR INTENCLR = 0x01 << 2 //+ Deprecated intclrfield - Write '1' to disable interrupt for event ERROR
	Disabled INTENCLR = 0x00 << 2 //  Read: Disabled
	Enabled INTENCLR = 0x01 << 2 //  Read: Enabled
	Clear INTENCLR = 0x01 << 2 //  Disable
)

const (
	ENDKSGENn = 0
	ENDCRYPTn = 1
	ERRORn = 2
)

const (
	MICSTATUS MICSTATUS = 0x01 << 0 //+ The result of the MIC check performed during the previous decryption operation
	CheckFailed MICSTATUS = 0x00 << 0 //  MIC check failed
	CheckPassed MICSTATUS = 0x01 << 0 //  MIC check passed
)

const (
	MICSTATUSn = 0
)

const (
	ENABLE ENABLE = 0x03 << 0 //+ Enable or disable CCM
	Disabled ENABLE = 0x00 << 0 //  Disable
	Enabled ENABLE = 0x02 << 0 //  Enable
)

const (
	ENABLEn = 0
)

const (
	MODE MODE = 0x01 << 0 //+ The mode of operation to be used. The settings in this register apply whenever either the KSGEN or CRYPT tasks are triggered.
	Encryption MODE = 0x00 << 0 //  AES CCM packet encryption mode
	Decryption MODE = 0x01 << 0 //  AES CCM packet decryption mode
	DATARATE MODE = 0x03 << 16 //+ Radio data rate that the CCM shall run synchronous with
	1Mbit MODE = 0x00 << 16 //  1 Mbps
	2Mbit MODE = 0x01 << 16 //  2 Mbps
	125Kbps MODE = 0x02 << 16 //  125 Kbps
	500Kbps MODE = 0x03 << 16 //  500 Kbps
	LENGTH MODE = 0x01 << 24 //+ Packet length configuration
	Default MODE = 0x00 << 24 //  Default length. Effective length of LENGTH field in encrypted/decrypted packet is 5 bits. A key-stream for packet payloads up to 27 bytes will be generated.
	Extended MODE = 0x01 << 24 //  Extended length. Effective length of LENGTH field in encrypted/decrypted packet is 8 bits. A key-stream for packet payloads up to MAXPACKETSIZE bytes will be generated.
)

const (
	MODEn = 0
	DATARATEn = 16
	LENGTHn = 24
)

const (
	CNFPTR CNFPTR = 0xFFFFFFFF << 0 //+ Pointer to the data structure holding the AES key and the CCM NONCE vector (see Table 1 CCM data structure overview)
)

const (
	CNFPTRn = 0
)

const (
	INPTR INPTR = 0xFFFFFFFF << 0 //+ Input pointer
)

const (
	INPTRn = 0
)

const (
	OUTPTR OUTPTR = 0xFFFFFFFF << 0 //+ Output pointer
)

const (
	OUTPTRn = 0
)

const (
	SCRATCHPTR SCRATCHPTR = 0xFFFFFFFF << 0 //+ Pointer to a scratch data area used for temporary storage during key-stream generation, MIC generation and encryption/decryption.
)

const (
	SCRATCHPTRn = 0
)

const (
	MAXPACKETSIZE MAXPACKETSIZE = 0xFF << 0 //+ Length of key-stream generated when MODE.LENGTH = Extended. This value must be greater or equal to the subsequent packet payload to be encrypted/decrypted.
)

const (
	MAXPACKETSIZEn = 0
)

const (
	RATEOVERRIDE RATEOVERRIDE = 0x03 << 0 //+ Data rate override setting.
	1Mbit RATEOVERRIDE = 0x00 << 0 //  1 Mbps
	2Mbit RATEOVERRIDE = 0x01 << 0 //  2 Mbps
	125Kbps RATEOVERRIDE = 0x02 << 0 //  125 Kbps
	500Kbps RATEOVERRIDE = 0x03 << 0 //  500 Kbps
)

const (
	RATEOVERRIDEn = 0
)
