// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52

// Package nfct provides access to the registers of the NFCT peripheral.
//
// Instances:
//  NFCT  NFCT_BASE  -  NFCT  NFC-A compatible radio
// Registers:
//  0x40C 32  RX                        Result of last incoming frame
//  0x518 32  FRAMECONFIG               Configuration of outgoing frames
//  0x51C 32  AMOUNT                    Size of outgoing frame
//  0x520 32  FRAMECONFIG               Configuration of incoming frames
//  0x524 32  AMOUNT                    Size of last incoming frame
//  0x000 32  TASKS_ACTIVATE            Activate NFCT peripheral for incoming and outgoing frames, change state to activated
//  0x004 32  TASKS_DISABLE             Disable NFCT peripheral
//  0x008 32  TASKS_SENSE               Enable NFC sense field mode, change state to sense mode
//  0x00C 32  TASKS_STARTTX             Start transmission of an outgoing frame, change state to transmit
//  0x01C 32  TASKS_ENABLERXDATA        Initializes the EasyDMA for receive.
//  0x024 32  TASKS_GOIDLE              Force state machine to IDLE state
//  0x028 32  TASKS_GOSLEEP             Force state machine to SLEEP_A state
//  0x100 32  EVENTS_READY              The NFCT peripheral is ready to receive and send frames
//  0x104 32  EVENTS_FIELDDETECTED      Remote NFC field detected
//  0x108 32  EVENTS_FIELDLOST          Remote NFC field lost
//  0x10C 32  EVENTS_TXFRAMESTART       Marks the start of the first symbol of a transmitted frame
//  0x110 32  EVENTS_TXFRAMEEND         Marks the end of the last transmitted on-air symbol of a frame
//  0x114 32  EVENTS_RXFRAMESTART       Marks the end of the first symbol of a received frame
//  0x118 32  EVENTS_RXFRAMEEND         Received data has been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing the RX buffer
//  0x11C 32  EVENTS_ERROR              NFC error reported. The ERRORSTATUS register contains details on the source of the error.
//  0x128 32  EVENTS_RXERROR            NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error.
//  0x12C 32  EVENTS_ENDRX              RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full.
//  0x130 32  EVENTS_ENDTX              Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer
//  0x138 32  EVENTS_AUTOCOLRESSTARTED  Auto collision resolution process has started
//  0x148 32  EVENTS_COLLISION          NFC auto collision resolution error reported.
//  0x14C 32  EVENTS_SELECTED           NFC auto collision resolution successfully completed
//  0x150 32  EVENTS_STARTED            EasyDMA is ready to receive or send frames.
//  0x200 32  SHORTS                    Shortcuts between local events and tasks
//  0x300 32  INTEN                     Enable or disable interrupt
//  0x304 32  INTENSET                  Enable interrupt
//  0x308 32  INTENCLR                  Disable interrupt
//  0x404 32  ERRORSTATUS               NFC Error Status register
//  0x410 32  NFCTAGSTATE               NfcTag state register
//  0x420 32  SLEEPSTATE                Sleep state during automatic collision resolution
//  0x43C 32  FIELDPRESENT              Indicates the presence or not of a valid field
//  0x504 32  FRAMEDELAYMIN             Minimum frame delay
//  0x508 32  FRAMEDELAYMAX             Maximum frame delay
//  0x50C 32  FRAMEDELAYMODE            Configuration register for the Frame Delay Timer
//  0x510 32  PACKETPTR                 Packet pointer for TXD and RXD data storage in Data RAM
//  0x514 32  MAXLEN                    Size of the RAM buffer allocated to TXD and RXD data storage each
//  0x590 32  NFCID1_LAST               Last NFCID1 part (4, 7 or 10 bytes ID)
//  0x594 32  NFCID1_2ND_LAST           Second last NFCID1 part (7 or 10 bytes ID)
//  0x598 32  NFCID1_3RD_LAST           Third last NFCID1 part (10 bytes ID)
//  0x59C 32  AUTOCOLRESCONFIG          Controls the auto collision resolution function. This setting must be done before the NFCT peripheral is enabled.
//  0x5A0 32  SENSRES                   NFC-A SENS_RES auto-response settings
//  0x5A4 32  SELRES                    NFC-A SEL_RES auto-response settings
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package nfct

const (
	CRCERROR     RX = 0x01 << 0 //+ No valid end of frame (EoF) detected
	CRCCorrect   RX = 0x00 << 0 //  Valid CRC detected
	CRCError     RX = 0x01 << 0 //  CRC received does not match local check
	PARITYSTATUS RX = 0x01 << 2 //+ Parity status of received frame
	ParityOK     RX = 0x00 << 2 //  Frame received with parity OK
	ParityError  RX = 0x01 << 2 //  Frame received with parity error
	OVERRUN      RX = 0x01 << 3 //+ Overrun detected
	NoOverrun    RX = 0x00 << 3 //  No overrun detected
	Overrun      RX = 0x01 << 3 //  Overrun error
)

const (
	CRCERRORn     = 0
	PARITYSTATUSn = 2
	OVERRUNn      = 3
)

const (
	PARITY       FRAMECONFIG = 0x01 << 0 //+ Indicates if parity is added to the frame
	NoParity     FRAMECONFIG = 0x00 << 0 //  Parity is not added to TX frames
	Parity       FRAMECONFIG = 0x01 << 0 //  Parity is added to TX frames
	DISCARDMODE  FRAMECONFIG = 0x01 << 1 //+ Discarding unused bits at start or end of a frame
	DiscardEnd   FRAMECONFIG = 0x00 << 1 //  Unused bits are discarded at end of frame (EoF)
	DiscardStart FRAMECONFIG = 0x01 << 1 //  Unused bits are discarded at start of frame (SoF)
	SOF          FRAMECONFIG = 0x01 << 2 //+ Adding SoF or not in TX frames
	NoSoF        FRAMECONFIG = 0x00 << 2 //  SoF symbol not added
	SoF          FRAMECONFIG = 0x01 << 2 //  SoF symbol added
	CRCMODETX    FRAMECONFIG = 0x01 << 4 //+ CRC mode for outgoing frames
	NoCRCTX      FRAMECONFIG = 0x00 << 4 //  CRC is not added to the frame
	CRC16TX      FRAMECONFIG = 0x01 << 4 //  16 bit CRC added to the frame based on all the data read from RAM that is used in the frame
)

const (
	PARITYn      = 0
	DISCARDMODEn = 1
	SOFn         = 2
	CRCMODETXn   = 4
)

const (
	TXDATABITS  AMOUNT = 0x07 << 0  //+ Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding parity bit).
	TXDATABYTES AMOUNT = 0x1FF << 3 //+ Number of complete bytes that shall be included in the frame, excluding CRC, parity and framing
)

const (
	TXDATABITSn  = 0
	TXDATABYTESn = 3
)

const (
	PARITY    FRAMECONFIG = 0x01 << 0 //+ Indicates if parity expected in RX frame
	NoParity  FRAMECONFIG = 0x00 << 0 //  Parity is not expected in RX frames
	Parity    FRAMECONFIG = 0x01 << 0 //  Parity is expected in RX frames
	SOF       FRAMECONFIG = 0x01 << 2 //+ SoF expected or not in RX frames
	NoSoF     FRAMECONFIG = 0x00 << 2 //  SoF symbol is not expected in RX frames
	SoF       FRAMECONFIG = 0x01 << 2 //  SoF symbol is expected in RX frames
	CRCMODERX FRAMECONFIG = 0x01 << 4 //+ CRC mode for incoming frames
	NoCRCRX   FRAMECONFIG = 0x00 << 4 //  CRC is not expected in RX frames
	CRC16RX   FRAMECONFIG = 0x01 << 4 //  Last 16 bits in RX frame is CRC, CRC is checked and CRCSTATUS updated
)

const (
	PARITYn    = 0
	SOFn       = 2
	CRCMODERXn = 4
)

const (
	RXDATABITS  AMOUNT = 0x07 << 0  //+ Number of bits in the last byte in the frame, if less than 8 (including CRC, but excluding parity and SoF/EoF framing).
	RXDATABYTES AMOUNT = 0x1FF << 3 //+ Number of complete bytes received in the frame (including CRC, but excluding parity and SoF/EoF framing)
)

const (
	RXDATABITSn  = 0
	RXDATABYTESn = 3
)

const (
	FIELDDETECTED_ACTIVATE  SHORTS = 0x01 << 0 //+ Shortcut between event FIELDDETECTED and task ACTIVATE
	Disabled                SHORTS = 0x00 << 0 //  Disable shortcut
	Enabled                 SHORTS = 0x01 << 0 //  Enable shortcut
	FIELDLOST_SENSE         SHORTS = 0x01 << 1 //+ Shortcut between event FIELDLOST and task SENSE
	Disabled                SHORTS = 0x00 << 1 //  Disable shortcut
	Enabled                 SHORTS = 0x01 << 1 //  Enable shortcut
	TXFRAMEEND_ENABLERXDATA SHORTS = 0x01 << 5 //+ Shortcut between event TXFRAMEEND and task ENABLERXDATA
	Disabled                SHORTS = 0x00 << 5 //  Disable shortcut
	Enabled                 SHORTS = 0x01 << 5 //  Enable shortcut
)

const (
	FIELDDETECTED_ACTIVATEn  = 0
	FIELDLOST_SENSEn         = 1
	TXFRAMEEND_ENABLERXDATAn = 5
)

const (
	READY             INTEN = 0x01 << 0  //+ Enable or disable interrupt for event READY
	Disabled          INTEN = 0x00 << 0  //  Disable
	Enabled           INTEN = 0x01 << 0  //  Enable
	FIELDDETECTED     INTEN = 0x01 << 1  //+ Enable or disable interrupt for event FIELDDETECTED
	Disabled          INTEN = 0x00 << 1  //  Disable
	Enabled           INTEN = 0x01 << 1  //  Enable
	FIELDLOST         INTEN = 0x01 << 2  //+ Enable or disable interrupt for event FIELDLOST
	Disabled          INTEN = 0x00 << 2  //  Disable
	Enabled           INTEN = 0x01 << 2  //  Enable
	TXFRAMESTART      INTEN = 0x01 << 3  //+ Enable or disable interrupt for event TXFRAMESTART
	Disabled          INTEN = 0x00 << 3  //  Disable
	Enabled           INTEN = 0x01 << 3  //  Enable
	TXFRAMEEND        INTEN = 0x01 << 4  //+ Enable or disable interrupt for event TXFRAMEEND
	Disabled          INTEN = 0x00 << 4  //  Disable
	Enabled           INTEN = 0x01 << 4  //  Enable
	RXFRAMESTART      INTEN = 0x01 << 5  //+ Enable or disable interrupt for event RXFRAMESTART
	Disabled          INTEN = 0x00 << 5  //  Disable
	Enabled           INTEN = 0x01 << 5  //  Enable
	RXFRAMEEND        INTEN = 0x01 << 6  //+ Enable or disable interrupt for event RXFRAMEEND
	Disabled          INTEN = 0x00 << 6  //  Disable
	Enabled           INTEN = 0x01 << 6  //  Enable
	ERROR             INTEN = 0x01 << 7  //+ Enable or disable interrupt for event ERROR
	Disabled          INTEN = 0x00 << 7  //  Disable
	Enabled           INTEN = 0x01 << 7  //  Enable
	RXERROR           INTEN = 0x01 << 10 //+ Enable or disable interrupt for event RXERROR
	Disabled          INTEN = 0x00 << 10 //  Disable
	Enabled           INTEN = 0x01 << 10 //  Enable
	ENDRX             INTEN = 0x01 << 11 //+ Enable or disable interrupt for event ENDRX
	Disabled          INTEN = 0x00 << 11 //  Disable
	Enabled           INTEN = 0x01 << 11 //  Enable
	ENDTX             INTEN = 0x01 << 12 //+ Enable or disable interrupt for event ENDTX
	Disabled          INTEN = 0x00 << 12 //  Disable
	Enabled           INTEN = 0x01 << 12 //  Enable
	AUTOCOLRESSTARTED INTEN = 0x01 << 14 //+ Enable or disable interrupt for event AUTOCOLRESSTARTED
	Disabled          INTEN = 0x00 << 14 //  Disable
	Enabled           INTEN = 0x01 << 14 //  Enable
	COLLISION         INTEN = 0x01 << 18 //+ Enable or disable interrupt for event COLLISION
	Disabled          INTEN = 0x00 << 18 //  Disable
	Enabled           INTEN = 0x01 << 18 //  Enable
	SELECTED          INTEN = 0x01 << 19 //+ Enable or disable interrupt for event SELECTED
	Disabled          INTEN = 0x00 << 19 //  Disable
	Enabled           INTEN = 0x01 << 19 //  Enable
	STARTED           INTEN = 0x01 << 20 //+ Enable or disable interrupt for event STARTED
	Disabled          INTEN = 0x00 << 20 //  Disable
	Enabled           INTEN = 0x01 << 20 //  Enable
)

const (
	READYn             = 0
	FIELDDETECTEDn     = 1
	FIELDLOSTn         = 2
	TXFRAMESTARTn      = 3
	TXFRAMEENDn        = 4
	RXFRAMESTARTn      = 5
	RXFRAMEENDn        = 6
	ERRORn             = 7
	RXERRORn           = 10
	ENDRXn             = 11
	ENDTXn             = 12
	AUTOCOLRESSTARTEDn = 14
	COLLISIONn         = 18
	SELECTEDn          = 19
	STARTEDn           = 20
)

const (
	READY             INTENSET = 0x01 << 0  //+ Write '1' to enable interrupt for event READY
	Disabled          INTENSET = 0x00 << 0  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 0  //  Read: Enabled
	Set               INTENSET = 0x01 << 0  //  Enable
	FIELDDETECTED     INTENSET = 0x01 << 1  //+ Write '1' to enable interrupt for event FIELDDETECTED
	Disabled          INTENSET = 0x00 << 1  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 1  //  Read: Enabled
	Set               INTENSET = 0x01 << 1  //  Enable
	FIELDLOST         INTENSET = 0x01 << 2  //+ Write '1' to enable interrupt for event FIELDLOST
	Disabled          INTENSET = 0x00 << 2  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 2  //  Read: Enabled
	Set               INTENSET = 0x01 << 2  //  Enable
	TXFRAMESTART      INTENSET = 0x01 << 3  //+ Write '1' to enable interrupt for event TXFRAMESTART
	Disabled          INTENSET = 0x00 << 3  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 3  //  Read: Enabled
	Set               INTENSET = 0x01 << 3  //  Enable
	TXFRAMEEND        INTENSET = 0x01 << 4  //+ Write '1' to enable interrupt for event TXFRAMEEND
	Disabled          INTENSET = 0x00 << 4  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 4  //  Read: Enabled
	Set               INTENSET = 0x01 << 4  //  Enable
	RXFRAMESTART      INTENSET = 0x01 << 5  //+ Write '1' to enable interrupt for event RXFRAMESTART
	Disabled          INTENSET = 0x00 << 5  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 5  //  Read: Enabled
	Set               INTENSET = 0x01 << 5  //  Enable
	RXFRAMEEND        INTENSET = 0x01 << 6  //+ Write '1' to enable interrupt for event RXFRAMEEND
	Disabled          INTENSET = 0x00 << 6  //  Read: Disabled
	Enabled           INTENSET = 0x01 << 6  //  Read: Enabled
	Set               INTENSET = 0x01 << 6  //  Enable
	ERROR             INTENSET = 0x01 << 7  //+ Write '1' to enable interrupt for event ERROR
	Disabled          INTENSET = 0x00 << 7  //  Read: Disabled
	Set               INTENSET = 0x01 << 7  //  Enable
	Enabled           INTENSET = 0x01 << 7  //  Read: Enabled
	RXERROR           INTENSET = 0x01 << 10 //+ Write '1' to enable interrupt for event RXERROR
	Disabled          INTENSET = 0x00 << 10 //  Read: Disabled
	Enabled           INTENSET = 0x01 << 10 //  Read: Enabled
	Set               INTENSET = 0x01 << 10 //  Enable
	ENDRX             INTENSET = 0x01 << 11 //+ Write '1' to enable interrupt for event ENDRX
	Disabled          INTENSET = 0x00 << 11 //  Read: Disabled
	Enabled           INTENSET = 0x01 << 11 //  Read: Enabled
	Set               INTENSET = 0x01 << 11 //  Enable
	ENDTX             INTENSET = 0x01 << 12 //+ Write '1' to enable interrupt for event ENDTX
	Disabled          INTENSET = 0x00 << 12 //  Read: Disabled
	Enabled           INTENSET = 0x01 << 12 //  Read: Enabled
	Set               INTENSET = 0x01 << 12 //  Enable
	AUTOCOLRESSTARTED INTENSET = 0x01 << 14 //+ Write '1' to enable interrupt for event AUTOCOLRESSTARTED
	Disabled          INTENSET = 0x00 << 14 //  Read: Disabled
	Set               INTENSET = 0x01 << 14 //  Enable
	Enabled           INTENSET = 0x01 << 14 //  Read: Enabled
	COLLISION         INTENSET = 0x01 << 18 //+ Write '1' to enable interrupt for event COLLISION
	Disabled          INTENSET = 0x00 << 18 //  Read: Disabled
	Enabled           INTENSET = 0x01 << 18 //  Read: Enabled
	Set               INTENSET = 0x01 << 18 //  Enable
	SELECTED          INTENSET = 0x01 << 19 //+ Write '1' to enable interrupt for event SELECTED
	Disabled          INTENSET = 0x00 << 19 //  Read: Disabled
	Enabled           INTENSET = 0x01 << 19 //  Read: Enabled
	Set               INTENSET = 0x01 << 19 //  Enable
	STARTED           INTENSET = 0x01 << 20 //+ Write '1' to enable interrupt for event STARTED
	Disabled          INTENSET = 0x00 << 20 //  Read: Disabled
	Set               INTENSET = 0x01 << 20 //  Enable
	Enabled           INTENSET = 0x01 << 20 //  Read: Enabled
)

const (
	READYn             = 0
	FIELDDETECTEDn     = 1
	FIELDLOSTn         = 2
	TXFRAMESTARTn      = 3
	TXFRAMEENDn        = 4
	RXFRAMESTARTn      = 5
	RXFRAMEENDn        = 6
	ERRORn             = 7
	RXERRORn           = 10
	ENDRXn             = 11
	ENDTXn             = 12
	AUTOCOLRESSTARTEDn = 14
	COLLISIONn         = 18
	SELECTEDn          = 19
	STARTEDn           = 20
)

const (
	READY             INTENCLR = 0x01 << 0  //+ Write '1' to disable interrupt for event READY
	Disabled          INTENCLR = 0x00 << 0  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 0  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 0  //  Disable
	FIELDDETECTED     INTENCLR = 0x01 << 1  //+ Write '1' to disable interrupt for event FIELDDETECTED
	Disabled          INTENCLR = 0x00 << 1  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 1  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 1  //  Disable
	FIELDLOST         INTENCLR = 0x01 << 2  //+ Write '1' to disable interrupt for event FIELDLOST
	Disabled          INTENCLR = 0x00 << 2  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 2  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 2  //  Disable
	TXFRAMESTART      INTENCLR = 0x01 << 3  //+ Write '1' to disable interrupt for event TXFRAMESTART
	Disabled          INTENCLR = 0x00 << 3  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 3  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 3  //  Disable
	TXFRAMEEND        INTENCLR = 0x01 << 4  //+ Write '1' to disable interrupt for event TXFRAMEEND
	Disabled          INTENCLR = 0x00 << 4  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 4  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 4  //  Disable
	RXFRAMESTART      INTENCLR = 0x01 << 5  //+ Write '1' to disable interrupt for event RXFRAMESTART
	Disabled          INTENCLR = 0x00 << 5  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 5  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 5  //  Disable
	RXFRAMEEND        INTENCLR = 0x01 << 6  //+ Write '1' to disable interrupt for event RXFRAMEEND
	Disabled          INTENCLR = 0x00 << 6  //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 6  //  Read: Enabled
	Clear             INTENCLR = 0x01 << 6  //  Disable
	ERROR             INTENCLR = 0x01 << 7  //+ Write '1' to disable interrupt for event ERROR
	Disabled          INTENCLR = 0x00 << 7  //  Read: Disabled
	Clear             INTENCLR = 0x01 << 7  //  Disable
	Enabled           INTENCLR = 0x01 << 7  //  Read: Enabled
	RXERROR           INTENCLR = 0x01 << 10 //+ Write '1' to disable interrupt for event RXERROR
	Disabled          INTENCLR = 0x00 << 10 //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 10 //  Read: Enabled
	Clear             INTENCLR = 0x01 << 10 //  Disable
	ENDRX             INTENCLR = 0x01 << 11 //+ Write '1' to disable interrupt for event ENDRX
	Disabled          INTENCLR = 0x00 << 11 //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 11 //  Read: Enabled
	Clear             INTENCLR = 0x01 << 11 //  Disable
	ENDTX             INTENCLR = 0x01 << 12 //+ Write '1' to disable interrupt for event ENDTX
	Disabled          INTENCLR = 0x00 << 12 //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 12 //  Read: Enabled
	Clear             INTENCLR = 0x01 << 12 //  Disable
	AUTOCOLRESSTARTED INTENCLR = 0x01 << 14 //+ Write '1' to disable interrupt for event AUTOCOLRESSTARTED
	Disabled          INTENCLR = 0x00 << 14 //  Read: Disabled
	Clear             INTENCLR = 0x01 << 14 //  Disable
	Enabled           INTENCLR = 0x01 << 14 //  Read: Enabled
	COLLISION         INTENCLR = 0x01 << 18 //+ Write '1' to disable interrupt for event COLLISION
	Disabled          INTENCLR = 0x00 << 18 //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 18 //  Read: Enabled
	Clear             INTENCLR = 0x01 << 18 //  Disable
	SELECTED          INTENCLR = 0x01 << 19 //+ Write '1' to disable interrupt for event SELECTED
	Disabled          INTENCLR = 0x00 << 19 //  Read: Disabled
	Enabled           INTENCLR = 0x01 << 19 //  Read: Enabled
	Clear             INTENCLR = 0x01 << 19 //  Disable
	STARTED           INTENCLR = 0x01 << 20 //+ Write '1' to disable interrupt for event STARTED
	Disabled          INTENCLR = 0x00 << 20 //  Read: Disabled
	Clear             INTENCLR = 0x01 << 20 //  Disable
	Enabled           INTENCLR = 0x01 << 20 //  Read: Enabled
)

const (
	READYn             = 0
	FIELDDETECTEDn     = 1
	FIELDLOSTn         = 2
	TXFRAMESTARTn      = 3
	TXFRAMEENDn        = 4
	RXFRAMESTARTn      = 5
	RXFRAMEENDn        = 6
	ERRORn             = 7
	RXERRORn           = 10
	ENDRXn             = 11
	ENDTXn             = 12
	AUTOCOLRESSTARTEDn = 14
	COLLISIONn         = 18
	SELECTEDn          = 19
	STARTEDn           = 20
)

const (
	FRAMEDELAYTIMEOUT ERRORSTATUS = 0x01 << 0 //+ No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX
)

const (
	FRAMEDELAYTIMEOUTn = 0
)

const (
	NFCTAGSTATE NFCTAGSTATE = 0x07 << 0 //+ NfcTag state
	Disabled    NFCTAGSTATE = 0x00 << 0 //  Disabled or sense
	RampUp      NFCTAGSTATE = 0x02 << 0 //  RampUp
	Idle        NFCTAGSTATE = 0x03 << 0 //  Idle
	Receive     NFCTAGSTATE = 0x04 << 0 //  Receive
	FrameDelay  NFCTAGSTATE = 0x05 << 0 //  FrameDelay
	Transmit    NFCTAGSTATE = 0x06 << 0 //  Transmit
)

const (
	NFCTAGSTATEn = 0
)

const (
	SLEEPSTATE SLEEPSTATE = 0x01 << 0 //+ Reflects the sleep state during automatic collision resolution. Set to IDLE by a GOIDLE task. Set to SLEEP_A when a valid SLEEP_REQ frame is received or by a GOSLEEP task.
	Idle       SLEEPSTATE = 0x00 << 0 //  State is IDLE.
	SleepA     SLEEPSTATE = 0x01 << 0 //  State is SLEEP_A.
)

const (
	SLEEPSTATEn = 0
)

const (
	FIELDPRESENT FIELDPRESENT = 0x01 << 0 //+ Indicates if a valid field is present. Available only in the activated state.
	NoField      FIELDPRESENT = 0x00 << 0 //  No valid field detected
	FieldPresent FIELDPRESENT = 0x01 << 0 //  Valid field detected
	LOCKDETECT   FIELDPRESENT = 0x01 << 1 //+ Indicates if the low level has locked to the field
	NotLocked    FIELDPRESENT = 0x00 << 1 //  Not locked to field
	Locked       FIELDPRESENT = 0x01 << 1 //  Locked to field
)

const (
	FIELDPRESENTn = 0
	LOCKDETECTn   = 1
)

const (
	FRAMEDELAYMIN FRAMEDELAYMIN = 0xFFFF << 0 //+ Minimum frame delay in number of 13.56 MHz clocks
)

const (
	FRAMEDELAYMINn = 0
)

const (
	FRAMEDELAYMAX FRAMEDELAYMAX = 0xFFFFF << 0 //+ Maximum frame delay in number of 13.56 MHz clocks
)

const (
	FRAMEDELAYMAXn = 0
)

const (
	FRAMEDELAYMODE FRAMEDELAYMODE = 0x03 << 0 //+ Configuration register for the Frame Delay Timer
	FreeRun        FRAMEDELAYMODE = 0x00 << 0 //  Transmission is independent of frame timer and will start when the STARTTX task is triggered. No timeout.
	Window         FRAMEDELAYMODE = 0x01 << 0 //  Frame is transmitted between FRAMEDELAYMIN and FRAMEDELAYMAX
	ExactVal       FRAMEDELAYMODE = 0x02 << 0 //  Frame is transmitted exactly at FRAMEDELAYMAX
	WindowGrid     FRAMEDELAYMODE = 0x03 << 0 //  Frame is transmitted on a bit grid between FRAMEDELAYMIN and FRAMEDELAYMAX
)

const (
	FRAMEDELAYMODEn = 0
)

const (
	PTR PACKETPTR = 0xFFFFFFFF << 0 //+ Packet pointer for TXD and RXD data storage in Data RAM. This address is a byte-aligned RAM address.
)

const (
	PTRn = 0
)

const (
	MAXLEN MAXLEN = 0x1FF << 0 //+ Size of the RAM buffer allocated to TXD and RXD data storage each
)

const (
	MAXLENn = 0
)

const (
	NFCID1_Z NFCID1_LAST = 0xFF << 0  //+ NFCID1 byte Z (very last byte sent)
	NFCID1_Y NFCID1_LAST = 0xFF << 8  //+ NFCID1 byte Y
	NFCID1_X NFCID1_LAST = 0xFF << 16 //+ NFCID1 byte X
	NFCID1_W NFCID1_LAST = 0xFF << 24 //+ NFCID1 byte W
)

const (
	NFCID1_Zn = 0
	NFCID1_Yn = 8
	NFCID1_Xn = 16
	NFCID1_Wn = 24
)

const (
	NFCID1_V NFCID1_2ND_LAST = 0xFF << 0  //+ NFCID1 byte V
	NFCID1_U NFCID1_2ND_LAST = 0xFF << 8  //+ NFCID1 byte U
	NFCID1_T NFCID1_2ND_LAST = 0xFF << 16 //+ NFCID1 byte T
)

const (
	NFCID1_Vn = 0
	NFCID1_Un = 8
	NFCID1_Tn = 16
)

const (
	NFCID1_S NFCID1_3RD_LAST = 0xFF << 0  //+ NFCID1 byte S
	NFCID1_R NFCID1_3RD_LAST = 0xFF << 8  //+ NFCID1 byte R
	NFCID1_Q NFCID1_3RD_LAST = 0xFF << 16 //+ NFCID1 byte Q
)

const (
	NFCID1_Sn = 0
	NFCID1_Rn = 8
	NFCID1_Qn = 16
)

const (
	MODE     AUTOCOLRESCONFIG = 0x01 << 0 //+ Enables/disables auto collision resolution
	Enabled  AUTOCOLRESCONFIG = 0x00 << 0 //  Auto collision resolution enabled
	Disabled AUTOCOLRESCONFIG = 0x01 << 0 //  Auto collision resolution disabled
)

const (
	MODEn = 0
)

const (
	BITFRAMESDD  SENSRES = 0x1F << 0  //+ Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification
	SDD00000     SENSRES = 0x00 << 0  //  SDD pattern 00000
	SDD00001     SENSRES = 0x01 << 0  //  SDD pattern 00001
	SDD00010     SENSRES = 0x02 << 0  //  SDD pattern 00010
	SDD00100     SENSRES = 0x04 << 0  //  SDD pattern 00100
	SDD01000     SENSRES = 0x08 << 0  //  SDD pattern 01000
	SDD10000     SENSRES = 0x10 << 0  //  SDD pattern 10000
	RFU5         SENSRES = 0x01 << 5  //+ Reserved for future use. Shall be 0.
	NFCIDSIZE    SENSRES = 0x03 << 6  //+ NFCID1 size. This value is used by the auto collision resolution engine.
	NFCID1Single SENSRES = 0x00 << 6  //  NFCID1 size: single (4 bytes)
	NFCID1Double SENSRES = 0x01 << 6  //  NFCID1 size: double (7 bytes)
	NFCID1Triple SENSRES = 0x02 << 6  //  NFCID1 size: triple (10 bytes)
	PLATFCONFIG  SENSRES = 0x0F << 8  //+ Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification
	RFU74        SENSRES = 0x0F << 12 //+ Reserved for future use. Shall be 0.
)

const (
	BITFRAMESDDn = 0
	RFU5n        = 5
	NFCIDSIZEn   = 6
	PLATFCONFIGn = 8
	RFU74n       = 12
)

const (
	RFU10    SELRES = 0x03 << 0 //+ Reserved for future use. Shall be 0.
	CASCADE  SELRES = 0x01 << 2 //+ Cascade as defined by the b3 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification (controlled by hardware, shall be 0)
	RFU43    SELRES = 0x03 << 3 //+ Reserved for future use. Shall be 0.
	PROTOCOL SELRES = 0x03 << 5 //+ Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification
	RFU7     SELRES = 0x01 << 7 //+ Reserved for future use. Shall be 0.
)

const (
	RFU10n    = 0
	CASCADEn  = 2
	RFU43n    = 3
	PROTOCOLn = 5
	RFU7n     = 7
)
