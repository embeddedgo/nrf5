// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package nvmc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_                   [256]uint32
	READY               RREADY
	_                   uint32
	READYNEXT           RREADYNEXT
	_                   [62]uint32
	CONFIG              RCONFIG
	ERASEPAGE           RERASEPAGE
	ERASEPCR1           RERASEPCR1
	ERASEALL            RERASEALL
	ERASEPCR0           RERASEPCR0
	ERASEUICR           RERASEUICR
	ERASEPAGEPARTIAL    RERASEPAGEPARTIAL
	ERASEPAGEPARTIALCFG RERASEPAGEPARTIALCFG
	_                   [7]uint32
	ICACHECNF           RICACHECNF
	_                   uint32
	IHIT                RIHIT
	IMISS               RIMISS
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func NVMC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.NVMC_BASE))) }

type READY uint32

type RREADY struct{ mmio.U32 }

func (r *RREADY) LoadBits(mask READY) READY { return READY(r.U32.LoadBits(uint32(mask))) }
func (r *RREADY) StoreBits(mask, b READY)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RREADY) SetBits(mask READY)        { r.U32.SetBits(uint32(mask)) }
func (r *RREADY) ClearBits(mask READY)      { r.U32.ClearBits(uint32(mask)) }
func (r *RREADY) Load() READY               { return READY(r.U32.Load()) }
func (r *RREADY) Store(b READY)             { r.U32.Store(uint32(b)) }

type RMREADY struct{ mmio.UM32 }

func (rm RMREADY) Load() READY   { return READY(rm.UM32.Load()) }
func (rm RMREADY) Store(b READY) { rm.UM32.Store(uint32(b)) }

type READYNEXT uint32

type RREADYNEXT struct{ mmio.U32 }

func (r *RREADYNEXT) LoadBits(mask READYNEXT) READYNEXT {
	return READYNEXT(r.U32.LoadBits(uint32(mask)))
}
func (r *RREADYNEXT) StoreBits(mask, b READYNEXT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RREADYNEXT) SetBits(mask READYNEXT)      { r.U32.SetBits(uint32(mask)) }
func (r *RREADYNEXT) ClearBits(mask READYNEXT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RREADYNEXT) Load() READYNEXT             { return READYNEXT(r.U32.Load()) }
func (r *RREADYNEXT) Store(b READYNEXT)           { r.U32.Store(uint32(b)) }

type RMREADYNEXT struct{ mmio.UM32 }

func (rm RMREADYNEXT) Load() READYNEXT   { return READYNEXT(rm.UM32.Load()) }
func (rm RMREADYNEXT) Store(b READYNEXT) { rm.UM32.Store(uint32(b)) }

type CONFIG uint32

type RCONFIG struct{ mmio.U32 }

func (r *RCONFIG) LoadBits(mask CONFIG) CONFIG { return CONFIG(r.U32.LoadBits(uint32(mask))) }
func (r *RCONFIG) StoreBits(mask, b CONFIG)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCONFIG) SetBits(mask CONFIG)         { r.U32.SetBits(uint32(mask)) }
func (r *RCONFIG) ClearBits(mask CONFIG)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCONFIG) Load() CONFIG                { return CONFIG(r.U32.Load()) }
func (r *RCONFIG) Store(b CONFIG)              { r.U32.Store(uint32(b)) }

type RMCONFIG struct{ mmio.UM32 }

func (rm RMCONFIG) Load() CONFIG   { return CONFIG(rm.UM32.Load()) }
func (rm RMCONFIG) Store(b CONFIG) { rm.UM32.Store(uint32(b)) }

func (p *Periph) WEN() RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(WEN)}}
}

type ERASEPAGE uint32

type RERASEPAGE struct{ mmio.U32 }

func (r *RERASEPAGE) LoadBits(mask ERASEPAGE) ERASEPAGE {
	return ERASEPAGE(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEPAGE) StoreBits(mask, b ERASEPAGE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RERASEPAGE) SetBits(mask ERASEPAGE)      { r.U32.SetBits(uint32(mask)) }
func (r *RERASEPAGE) ClearBits(mask ERASEPAGE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEPAGE) Load() ERASEPAGE             { return ERASEPAGE(r.U32.Load()) }
func (r *RERASEPAGE) Store(b ERASEPAGE)           { r.U32.Store(uint32(b)) }

type RMERASEPAGE struct{ mmio.UM32 }

func (rm RMERASEPAGE) Load() ERASEPAGE   { return ERASEPAGE(rm.UM32.Load()) }
func (rm RMERASEPAGE) Store(b ERASEPAGE) { rm.UM32.Store(uint32(b)) }

type ERASEPCR1 uint32

type RERASEPCR1 struct{ mmio.U32 }

func (r *RERASEPCR1) LoadBits(mask ERASEPCR1) ERASEPCR1 {
	return ERASEPCR1(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEPCR1) StoreBits(mask, b ERASEPCR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RERASEPCR1) SetBits(mask ERASEPCR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RERASEPCR1) ClearBits(mask ERASEPCR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEPCR1) Load() ERASEPCR1             { return ERASEPCR1(r.U32.Load()) }
func (r *RERASEPCR1) Store(b ERASEPCR1)           { r.U32.Store(uint32(b)) }

type RMERASEPCR1 struct{ mmio.UM32 }

func (rm RMERASEPCR1) Load() ERASEPCR1   { return ERASEPCR1(rm.UM32.Load()) }
func (rm RMERASEPCR1) Store(b ERASEPCR1) { rm.UM32.Store(uint32(b)) }

type ERASEALL uint32

type RERASEALL struct{ mmio.U32 }

func (r *RERASEALL) LoadBits(mask ERASEALL) ERASEALL { return ERASEALL(r.U32.LoadBits(uint32(mask))) }
func (r *RERASEALL) StoreBits(mask, b ERASEALL)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RERASEALL) SetBits(mask ERASEALL)           { r.U32.SetBits(uint32(mask)) }
func (r *RERASEALL) ClearBits(mask ERASEALL)         { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEALL) Load() ERASEALL                  { return ERASEALL(r.U32.Load()) }
func (r *RERASEALL) Store(b ERASEALL)                { r.U32.Store(uint32(b)) }

type RMERASEALL struct{ mmio.UM32 }

func (rm RMERASEALL) Load() ERASEALL   { return ERASEALL(rm.UM32.Load()) }
func (rm RMERASEALL) Store(b ERASEALL) { rm.UM32.Store(uint32(b)) }

type ERASEPCR0 uint32

type RERASEPCR0 struct{ mmio.U32 }

func (r *RERASEPCR0) LoadBits(mask ERASEPCR0) ERASEPCR0 {
	return ERASEPCR0(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEPCR0) StoreBits(mask, b ERASEPCR0) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RERASEPCR0) SetBits(mask ERASEPCR0)      { r.U32.SetBits(uint32(mask)) }
func (r *RERASEPCR0) ClearBits(mask ERASEPCR0)    { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEPCR0) Load() ERASEPCR0             { return ERASEPCR0(r.U32.Load()) }
func (r *RERASEPCR0) Store(b ERASEPCR0)           { r.U32.Store(uint32(b)) }

type RMERASEPCR0 struct{ mmio.UM32 }

func (rm RMERASEPCR0) Load() ERASEPCR0   { return ERASEPCR0(rm.UM32.Load()) }
func (rm RMERASEPCR0) Store(b ERASEPCR0) { rm.UM32.Store(uint32(b)) }

type ERASEUICR uint32

type RERASEUICR struct{ mmio.U32 }

func (r *RERASEUICR) LoadBits(mask ERASEUICR) ERASEUICR {
	return ERASEUICR(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEUICR) StoreBits(mask, b ERASEUICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RERASEUICR) SetBits(mask ERASEUICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RERASEUICR) ClearBits(mask ERASEUICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEUICR) Load() ERASEUICR             { return ERASEUICR(r.U32.Load()) }
func (r *RERASEUICR) Store(b ERASEUICR)           { r.U32.Store(uint32(b)) }

type RMERASEUICR struct{ mmio.UM32 }

func (rm RMERASEUICR) Load() ERASEUICR   { return ERASEUICR(rm.UM32.Load()) }
func (rm RMERASEUICR) Store(b ERASEUICR) { rm.UM32.Store(uint32(b)) }

type ERASEPAGEPARTIAL uint32

type RERASEPAGEPARTIAL struct{ mmio.U32 }

func (r *RERASEPAGEPARTIAL) LoadBits(mask ERASEPAGEPARTIAL) ERASEPAGEPARTIAL {
	return ERASEPAGEPARTIAL(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEPAGEPARTIAL) StoreBits(mask, b ERASEPAGEPARTIAL) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RERASEPAGEPARTIAL) SetBits(mask ERASEPAGEPARTIAL)   { r.U32.SetBits(uint32(mask)) }
func (r *RERASEPAGEPARTIAL) ClearBits(mask ERASEPAGEPARTIAL) { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEPAGEPARTIAL) Load() ERASEPAGEPARTIAL          { return ERASEPAGEPARTIAL(r.U32.Load()) }
func (r *RERASEPAGEPARTIAL) Store(b ERASEPAGEPARTIAL)        { r.U32.Store(uint32(b)) }

type RMERASEPAGEPARTIAL struct{ mmio.UM32 }

func (rm RMERASEPAGEPARTIAL) Load() ERASEPAGEPARTIAL   { return ERASEPAGEPARTIAL(rm.UM32.Load()) }
func (rm RMERASEPAGEPARTIAL) Store(b ERASEPAGEPARTIAL) { rm.UM32.Store(uint32(b)) }

type ERASEPAGEPARTIALCFG uint32

type RERASEPAGEPARTIALCFG struct{ mmio.U32 }

func (r *RERASEPAGEPARTIALCFG) LoadBits(mask ERASEPAGEPARTIALCFG) ERASEPAGEPARTIALCFG {
	return ERASEPAGEPARTIALCFG(r.U32.LoadBits(uint32(mask)))
}
func (r *RERASEPAGEPARTIALCFG) StoreBits(mask, b ERASEPAGEPARTIALCFG) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RERASEPAGEPARTIALCFG) SetBits(mask ERASEPAGEPARTIALCFG)   { r.U32.SetBits(uint32(mask)) }
func (r *RERASEPAGEPARTIALCFG) ClearBits(mask ERASEPAGEPARTIALCFG) { r.U32.ClearBits(uint32(mask)) }
func (r *RERASEPAGEPARTIALCFG) Load() ERASEPAGEPARTIALCFG          { return ERASEPAGEPARTIALCFG(r.U32.Load()) }
func (r *RERASEPAGEPARTIALCFG) Store(b ERASEPAGEPARTIALCFG)        { r.U32.Store(uint32(b)) }

type RMERASEPAGEPARTIALCFG struct{ mmio.UM32 }

func (rm RMERASEPAGEPARTIALCFG) Load() ERASEPAGEPARTIALCFG   { return ERASEPAGEPARTIALCFG(rm.UM32.Load()) }
func (rm RMERASEPAGEPARTIALCFG) Store(b ERASEPAGEPARTIALCFG) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DURATION() RMERASEPAGEPARTIALCFG {
	return RMERASEPAGEPARTIALCFG{mmio.UM32{&p.ERASEPAGEPARTIALCFG.U32, uint32(DURATION)}}
}

type ICACHECNF uint32

type RICACHECNF struct{ mmio.U32 }

func (r *RICACHECNF) LoadBits(mask ICACHECNF) ICACHECNF {
	return ICACHECNF(r.U32.LoadBits(uint32(mask)))
}
func (r *RICACHECNF) StoreBits(mask, b ICACHECNF) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICACHECNF) SetBits(mask ICACHECNF)      { r.U32.SetBits(uint32(mask)) }
func (r *RICACHECNF) ClearBits(mask ICACHECNF)    { r.U32.ClearBits(uint32(mask)) }
func (r *RICACHECNF) Load() ICACHECNF             { return ICACHECNF(r.U32.Load()) }
func (r *RICACHECNF) Store(b ICACHECNF)           { r.U32.Store(uint32(b)) }

type RMICACHECNF struct{ mmio.UM32 }

func (rm RMICACHECNF) Load() ICACHECNF   { return ICACHECNF(rm.UM32.Load()) }
func (rm RMICACHECNF) Store(b ICACHECNF) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CACHEEN() RMICACHECNF {
	return RMICACHECNF{mmio.UM32{&p.ICACHECNF.U32, uint32(CACHEEN)}}
}

func (p *Periph) CACHEPROFEN() RMICACHECNF {
	return RMICACHECNF{mmio.UM32{&p.ICACHECNF.U32, uint32(CACHEPROFEN)}}
}

type IHIT uint32

type RIHIT struct{ mmio.U32 }

func (r *RIHIT) LoadBits(mask IHIT) IHIT { return IHIT(r.U32.LoadBits(uint32(mask))) }
func (r *RIHIT) StoreBits(mask, b IHIT)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIHIT) SetBits(mask IHIT)       { r.U32.SetBits(uint32(mask)) }
func (r *RIHIT) ClearBits(mask IHIT)     { r.U32.ClearBits(uint32(mask)) }
func (r *RIHIT) Load() IHIT              { return IHIT(r.U32.Load()) }
func (r *RIHIT) Store(b IHIT)            { r.U32.Store(uint32(b)) }

type RMIHIT struct{ mmio.UM32 }

func (rm RMIHIT) Load() IHIT   { return IHIT(rm.UM32.Load()) }
func (rm RMIHIT) Store(b IHIT) { rm.UM32.Store(uint32(b)) }

type IMISS uint32

type RIMISS struct{ mmio.U32 }

func (r *RIMISS) LoadBits(mask IMISS) IMISS { return IMISS(r.U32.LoadBits(uint32(mask))) }
func (r *RIMISS) StoreBits(mask, b IMISS)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIMISS) SetBits(mask IMISS)        { r.U32.SetBits(uint32(mask)) }
func (r *RIMISS) ClearBits(mask IMISS)      { r.U32.ClearBits(uint32(mask)) }
func (r *RIMISS) Load() IMISS               { return IMISS(r.U32.Load()) }
func (r *RIMISS) Store(b IMISS)             { r.U32.Store(uint32(b)) }

type RMIMISS struct{ mmio.UM32 }

func (rm RMIMISS) Load() IMISS   { return IMISS(rm.UM32.Load()) }
func (rm RMIMISS) Store(b IMISS) { rm.UM32.Store(uint32(b)) }
