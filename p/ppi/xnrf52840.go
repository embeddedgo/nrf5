// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package ppi

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	TASK_CHG [6]RTASK_CHG
	_        [308]uint32
	CHEN     RCHEN
	CHENSET  RCHENSET
	CHENCLR  RCHENCLR
	_        uint32
	CH       [20]RCH
	_        [148]uint32
	CHG      [6]RCHG
	_        [62]uint32
	FORK_TEP [32]RFORK_TEP
}

func PPI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PPI_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type RTASK_CHG struct {
	EN  REN
	DIS RDIS
}

type EN uint32

type REN struct{ mmio.U32 }

func (r *REN) LoadBits(mask EN) EN  { return EN(r.U32.LoadBits(uint32(mask))) }
func (r *REN) StoreBits(mask, b EN) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REN) SetBits(mask EN)      { r.U32.SetBits(uint32(mask)) }
func (r *REN) ClearBits(mask EN)    { r.U32.ClearBits(uint32(mask)) }
func (r *REN) Load() EN             { return EN(r.U32.Load()) }
func (r *REN) Store(b EN)           { r.U32.Store(uint32(b)) }

type RMEN struct{ mmio.UM32 }

func (rm RMEN) Load() EN   { return EN(rm.UM32.Load()) }
func (rm RMEN) Store(b EN) { rm.UM32.Store(uint32(b)) }

type DIS uint32

type RDIS struct{ mmio.U32 }

func (r *RDIS) LoadBits(mask DIS) DIS { return DIS(r.U32.LoadBits(uint32(mask))) }
func (r *RDIS) StoreBits(mask, b DIS) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIS) SetBits(mask DIS)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIS) ClearBits(mask DIS)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIS) Load() DIS             { return DIS(r.U32.Load()) }
func (r *RDIS) Store(b DIS)           { r.U32.Store(uint32(b)) }

type RMDIS struct{ mmio.UM32 }

func (rm RMDIS) Load() DIS   { return DIS(rm.UM32.Load()) }
func (rm RMDIS) Store(b DIS) { rm.UM32.Store(uint32(b)) }

type CHEN uint32

type RCHEN struct{ mmio.U32 }

func (r *RCHEN) LoadBits(mask CHEN) CHEN { return CHEN(r.U32.LoadBits(uint32(mask))) }
func (r *RCHEN) StoreBits(mask, b CHEN)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHEN) SetBits(mask CHEN)       { r.U32.SetBits(uint32(mask)) }
func (r *RCHEN) ClearBits(mask CHEN)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCHEN) Load() CHEN              { return CHEN(r.U32.Load()) }
func (r *RCHEN) Store(b CHEN)            { r.U32.Store(uint32(b)) }

type RMCHEN struct{ mmio.UM32 }

func (rm RMCHEN) Load() CHEN   { return CHEN(rm.UM32.Load()) }
func (rm RMCHEN) Store(b CHEN) { rm.UM32.Store(uint32(b)) }

type CHENSET uint32

type RCHENSET struct{ mmio.U32 }

func (r *RCHENSET) LoadBits(mask CHENSET) CHENSET { return CHENSET(r.U32.LoadBits(uint32(mask))) }
func (r *RCHENSET) StoreBits(mask, b CHENSET)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHENSET) SetBits(mask CHENSET)          { r.U32.SetBits(uint32(mask)) }
func (r *RCHENSET) ClearBits(mask CHENSET)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCHENSET) Load() CHENSET                 { return CHENSET(r.U32.Load()) }
func (r *RCHENSET) Store(b CHENSET)               { r.U32.Store(uint32(b)) }

type RMCHENSET struct{ mmio.UM32 }

func (rm RMCHENSET) Load() CHENSET   { return CHENSET(rm.UM32.Load()) }
func (rm RMCHENSET) Store(b CHENSET) { rm.UM32.Store(uint32(b)) }

type CHENCLR uint32

type RCHENCLR struct{ mmio.U32 }

func (r *RCHENCLR) LoadBits(mask CHENCLR) CHENCLR { return CHENCLR(r.U32.LoadBits(uint32(mask))) }
func (r *RCHENCLR) StoreBits(mask, b CHENCLR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHENCLR) SetBits(mask CHENCLR)          { r.U32.SetBits(uint32(mask)) }
func (r *RCHENCLR) ClearBits(mask CHENCLR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCHENCLR) Load() CHENCLR                 { return CHENCLR(r.U32.Load()) }
func (r *RCHENCLR) Store(b CHENCLR)               { r.U32.Store(uint32(b)) }

type RMCHENCLR struct{ mmio.UM32 }

func (rm RMCHENCLR) Load() CHENCLR   { return CHENCLR(rm.UM32.Load()) }
func (rm RMCHENCLR) Store(b CHENCLR) { rm.UM32.Store(uint32(b)) }

type RCH struct {
	EEP REEP
	TEP RTEP
}

type EEP uint32

type REEP struct{ mmio.U32 }

func (r *REEP) LoadBits(mask EEP) EEP { return EEP(r.U32.LoadBits(uint32(mask))) }
func (r *REEP) StoreBits(mask, b EEP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REEP) SetBits(mask EEP)      { r.U32.SetBits(uint32(mask)) }
func (r *REEP) ClearBits(mask EEP)    { r.U32.ClearBits(uint32(mask)) }
func (r *REEP) Load() EEP             { return EEP(r.U32.Load()) }
func (r *REEP) Store(b EEP)           { r.U32.Store(uint32(b)) }

type RMEEP struct{ mmio.UM32 }

func (rm RMEEP) Load() EEP   { return EEP(rm.UM32.Load()) }
func (rm RMEEP) Store(b EEP) { rm.UM32.Store(uint32(b)) }

type TEP uint32

type RTEP struct{ mmio.U32 }

func (r *RTEP) LoadBits(mask TEP) TEP { return TEP(r.U32.LoadBits(uint32(mask))) }
func (r *RTEP) StoreBits(mask, b TEP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTEP) SetBits(mask TEP)      { r.U32.SetBits(uint32(mask)) }
func (r *RTEP) ClearBits(mask TEP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTEP) Load() TEP             { return TEP(r.U32.Load()) }
func (r *RTEP) Store(b TEP)           { r.U32.Store(uint32(b)) }

type RMTEP struct{ mmio.UM32 }

func (rm RMTEP) Load() TEP   { return TEP(rm.UM32.Load()) }
func (rm RMTEP) Store(b TEP) { rm.UM32.Store(uint32(b)) }

type CHG uint32

type RCHG struct{ mmio.U32 }

func (r *RCHG) LoadBits(mask CHG) CHG { return CHG(r.U32.LoadBits(uint32(mask))) }
func (r *RCHG) StoreBits(mask, b CHG) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHG) SetBits(mask CHG)      { r.U32.SetBits(uint32(mask)) }
func (r *RCHG) ClearBits(mask CHG)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCHG) Load() CHG             { return CHG(r.U32.Load()) }
func (r *RCHG) Store(b CHG)           { r.U32.Store(uint32(b)) }

type RMCHG struct{ mmio.UM32 }

func (rm RMCHG) Load() CHG   { return CHG(rm.UM32.Load()) }
func (rm RMCHG) Store(b CHG) { rm.UM32.Store(uint32(b)) }

type FORK_TEP uint32

type RFORK_TEP struct{ mmio.U32 }

func (r *RFORK_TEP) LoadBits(mask FORK_TEP) FORK_TEP { return FORK_TEP(r.U32.LoadBits(uint32(mask))) }
func (r *RFORK_TEP) StoreBits(mask, b FORK_TEP)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFORK_TEP) SetBits(mask FORK_TEP)           { r.U32.SetBits(uint32(mask)) }
func (r *RFORK_TEP) ClearBits(mask FORK_TEP)         { r.U32.ClearBits(uint32(mask)) }
func (r *RFORK_TEP) Load() FORK_TEP                  { return FORK_TEP(r.U32.Load()) }
func (r *RFORK_TEP) Store(b FORK_TEP)                { r.U32.Store(uint32(b)) }

type RMFORK_TEP struct{ mmio.UM32 }

func (rm RMFORK_TEP) Load() FORK_TEP   { return FORK_TEP(rm.UM32.Load()) }
func (rm RMFORK_TEP) Store(b FORK_TEP) { rm.UM32.Store(uint32(b)) }
