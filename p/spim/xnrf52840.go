// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package spim

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_                [4]uint32
	TASK_START       RTASK_START
	TASK_STOP        RTASK_STOP
	_                uint32
	TASK_SUSPEND     RTASK_SUSPEND
	TASK_RESUME      RTASK_RESUME
	_                [56]uint32
	EVENT_STOPPED    REVENT_STOPPED
	_                [2]uint32
	EVENT_ENDRX      REVENT_ENDRX
	_                uint32
	EVENT_END        REVENT_END
	_                uint32
	EVENT_ENDTX      REVENT_ENDTX
	_                [10]uint32
	EVENT_STARTED    REVENT_STARTED
	_                [44]uint32
	SHORTS           RSHORTS
	_                [64]uint32
	INTENSET         RINTENSET
	INTENCLR         RINTENCLR
	_                [61]uint32
	STALLSTAT        RSTALLSTAT
	_                [63]uint32
	ENABLE           RENABLE
	_                uint32
	PSEL_SCK         RPSEL_SCK
	PSEL_MOSI        RPSEL_MOSI
	PSEL_MISO        RPSEL_MISO
	PSEL_CSN         RPSEL_CSN
	_                [3]uint32
	FREQUENCY        RFREQUENCY
	_                [3]uint32
	RXD_PTR          RRXD_PTR
	RXD_MAXCNT       RRXD_MAXCNT
	RXD_AMOUNT       RRXD_AMOUNT
	RXD_LIST         RRXD_LIST
	TXD_PTR          RTXD_PTR
	TXD_MAXCNT       RTXD_MAXCNT
	TXD_AMOUNT       RTXD_AMOUNT
	TXD_LIST         RTXD_LIST
	CONFIG           RCONFIG
	_                [2]uint32
	IFTIMING_RXDELAY RIFTIMING_RXDELAY
	IFTIMING_CSNDUR  RIFTIMING_CSNDUR
	CSNPOL           RCSNPOL
	PSELDCX          RPSELDCX
	DCXCNT           RDCXCNT
	_                [19]uint32
	ORC              RORC
}

func SPIM0() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPIM0_BASE))) }
func SPIM1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPIM1_BASE))) }
func SPIM2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPIM2_BASE))) }
func SPIM3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPIM3_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type TASK_START uint32

type RTASK_START struct{ mmio.U32 }

func (r *RTASK_START) LoadBits(mask TASK_START) TASK_START {
	return TASK_START(r.U32.LoadBits(uint32(mask)))
}
func (r *RTASK_START) StoreBits(mask, b TASK_START) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTASK_START) SetBits(mask TASK_START)      { r.U32.SetBits(uint32(mask)) }
func (r *RTASK_START) ClearBits(mask TASK_START)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTASK_START) Load() TASK_START             { return TASK_START(r.U32.Load()) }
func (r *RTASK_START) Store(b TASK_START)           { r.U32.Store(uint32(b)) }

type RMTASK_START struct{ mmio.UM32 }

func (rm RMTASK_START) Load() TASK_START   { return TASK_START(rm.UM32.Load()) }
func (rm RMTASK_START) Store(b TASK_START) { rm.UM32.Store(uint32(b)) }

type TASK_STOP uint32

type RTASK_STOP struct{ mmio.U32 }

func (r *RTASK_STOP) LoadBits(mask TASK_STOP) TASK_STOP {
	return TASK_STOP(r.U32.LoadBits(uint32(mask)))
}
func (r *RTASK_STOP) StoreBits(mask, b TASK_STOP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTASK_STOP) SetBits(mask TASK_STOP)      { r.U32.SetBits(uint32(mask)) }
func (r *RTASK_STOP) ClearBits(mask TASK_STOP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTASK_STOP) Load() TASK_STOP             { return TASK_STOP(r.U32.Load()) }
func (r *RTASK_STOP) Store(b TASK_STOP)           { r.U32.Store(uint32(b)) }

type RMTASK_STOP struct{ mmio.UM32 }

func (rm RMTASK_STOP) Load() TASK_STOP   { return TASK_STOP(rm.UM32.Load()) }
func (rm RMTASK_STOP) Store(b TASK_STOP) { rm.UM32.Store(uint32(b)) }

type TASK_SUSPEND uint32

type RTASK_SUSPEND struct{ mmio.U32 }

func (r *RTASK_SUSPEND) LoadBits(mask TASK_SUSPEND) TASK_SUSPEND {
	return TASK_SUSPEND(r.U32.LoadBits(uint32(mask)))
}
func (r *RTASK_SUSPEND) StoreBits(mask, b TASK_SUSPEND) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTASK_SUSPEND) SetBits(mask TASK_SUSPEND)      { r.U32.SetBits(uint32(mask)) }
func (r *RTASK_SUSPEND) ClearBits(mask TASK_SUSPEND)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTASK_SUSPEND) Load() TASK_SUSPEND             { return TASK_SUSPEND(r.U32.Load()) }
func (r *RTASK_SUSPEND) Store(b TASK_SUSPEND)           { r.U32.Store(uint32(b)) }

type RMTASK_SUSPEND struct{ mmio.UM32 }

func (rm RMTASK_SUSPEND) Load() TASK_SUSPEND   { return TASK_SUSPEND(rm.UM32.Load()) }
func (rm RMTASK_SUSPEND) Store(b TASK_SUSPEND) { rm.UM32.Store(uint32(b)) }

type TASK_RESUME uint32

type RTASK_RESUME struct{ mmio.U32 }

func (r *RTASK_RESUME) LoadBits(mask TASK_RESUME) TASK_RESUME {
	return TASK_RESUME(r.U32.LoadBits(uint32(mask)))
}
func (r *RTASK_RESUME) StoreBits(mask, b TASK_RESUME) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTASK_RESUME) SetBits(mask TASK_RESUME)      { r.U32.SetBits(uint32(mask)) }
func (r *RTASK_RESUME) ClearBits(mask TASK_RESUME)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTASK_RESUME) Load() TASK_RESUME             { return TASK_RESUME(r.U32.Load()) }
func (r *RTASK_RESUME) Store(b TASK_RESUME)           { r.U32.Store(uint32(b)) }

type RMTASK_RESUME struct{ mmio.UM32 }

func (rm RMTASK_RESUME) Load() TASK_RESUME   { return TASK_RESUME(rm.UM32.Load()) }
func (rm RMTASK_RESUME) Store(b TASK_RESUME) { rm.UM32.Store(uint32(b)) }

type EVENT_STOPPED uint32

type REVENT_STOPPED struct{ mmio.U32 }

func (r *REVENT_STOPPED) LoadBits(mask EVENT_STOPPED) EVENT_STOPPED {
	return EVENT_STOPPED(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_STOPPED) StoreBits(mask, b EVENT_STOPPED) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_STOPPED) SetBits(mask EVENT_STOPPED)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_STOPPED) ClearBits(mask EVENT_STOPPED)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_STOPPED) Load() EVENT_STOPPED             { return EVENT_STOPPED(r.U32.Load()) }
func (r *REVENT_STOPPED) Store(b EVENT_STOPPED)           { r.U32.Store(uint32(b)) }

type RMEVENT_STOPPED struct{ mmio.UM32 }

func (rm RMEVENT_STOPPED) Load() EVENT_STOPPED   { return EVENT_STOPPED(rm.UM32.Load()) }
func (rm RMEVENT_STOPPED) Store(b EVENT_STOPPED) { rm.UM32.Store(uint32(b)) }

type EVENT_ENDRX uint32

type REVENT_ENDRX struct{ mmio.U32 }

func (r *REVENT_ENDRX) LoadBits(mask EVENT_ENDRX) EVENT_ENDRX {
	return EVENT_ENDRX(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_ENDRX) StoreBits(mask, b EVENT_ENDRX) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_ENDRX) SetBits(mask EVENT_ENDRX)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_ENDRX) ClearBits(mask EVENT_ENDRX)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_ENDRX) Load() EVENT_ENDRX             { return EVENT_ENDRX(r.U32.Load()) }
func (r *REVENT_ENDRX) Store(b EVENT_ENDRX)           { r.U32.Store(uint32(b)) }

type RMEVENT_ENDRX struct{ mmio.UM32 }

func (rm RMEVENT_ENDRX) Load() EVENT_ENDRX   { return EVENT_ENDRX(rm.UM32.Load()) }
func (rm RMEVENT_ENDRX) Store(b EVENT_ENDRX) { rm.UM32.Store(uint32(b)) }

type EVENT_END uint32

type REVENT_END struct{ mmio.U32 }

func (r *REVENT_END) LoadBits(mask EVENT_END) EVENT_END {
	return EVENT_END(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_END) StoreBits(mask, b EVENT_END) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_END) SetBits(mask EVENT_END)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_END) ClearBits(mask EVENT_END)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_END) Load() EVENT_END             { return EVENT_END(r.U32.Load()) }
func (r *REVENT_END) Store(b EVENT_END)           { r.U32.Store(uint32(b)) }

type RMEVENT_END struct{ mmio.UM32 }

func (rm RMEVENT_END) Load() EVENT_END   { return EVENT_END(rm.UM32.Load()) }
func (rm RMEVENT_END) Store(b EVENT_END) { rm.UM32.Store(uint32(b)) }

type EVENT_ENDTX uint32

type REVENT_ENDTX struct{ mmio.U32 }

func (r *REVENT_ENDTX) LoadBits(mask EVENT_ENDTX) EVENT_ENDTX {
	return EVENT_ENDTX(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_ENDTX) StoreBits(mask, b EVENT_ENDTX) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_ENDTX) SetBits(mask EVENT_ENDTX)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_ENDTX) ClearBits(mask EVENT_ENDTX)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_ENDTX) Load() EVENT_ENDTX             { return EVENT_ENDTX(r.U32.Load()) }
func (r *REVENT_ENDTX) Store(b EVENT_ENDTX)           { r.U32.Store(uint32(b)) }

type RMEVENT_ENDTX struct{ mmio.UM32 }

func (rm RMEVENT_ENDTX) Load() EVENT_ENDTX   { return EVENT_ENDTX(rm.UM32.Load()) }
func (rm RMEVENT_ENDTX) Store(b EVENT_ENDTX) { rm.UM32.Store(uint32(b)) }

type EVENT_STARTED uint32

type REVENT_STARTED struct{ mmio.U32 }

func (r *REVENT_STARTED) LoadBits(mask EVENT_STARTED) EVENT_STARTED {
	return EVENT_STARTED(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_STARTED) StoreBits(mask, b EVENT_STARTED) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_STARTED) SetBits(mask EVENT_STARTED)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_STARTED) ClearBits(mask EVENT_STARTED)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_STARTED) Load() EVENT_STARTED             { return EVENT_STARTED(r.U32.Load()) }
func (r *REVENT_STARTED) Store(b EVENT_STARTED)           { r.U32.Store(uint32(b)) }

type RMEVENT_STARTED struct{ mmio.UM32 }

func (rm RMEVENT_STARTED) Load() EVENT_STARTED   { return EVENT_STARTED(rm.UM32.Load()) }
func (rm RMEVENT_STARTED) Store(b EVENT_STARTED) { rm.UM32.Store(uint32(b)) }

type SHORTS uint32

type RSHORTS struct{ mmio.U32 }

func (r *RSHORTS) LoadBits(mask SHORTS) SHORTS { return SHORTS(r.U32.LoadBits(uint32(mask))) }
func (r *RSHORTS) StoreBits(mask, b SHORTS)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSHORTS) SetBits(mask SHORTS)         { r.U32.SetBits(uint32(mask)) }
func (r *RSHORTS) ClearBits(mask SHORTS)       { r.U32.ClearBits(uint32(mask)) }
func (r *RSHORTS) Load() SHORTS                { return SHORTS(r.U32.Load()) }
func (r *RSHORTS) Store(b SHORTS)              { r.U32.Store(uint32(b)) }

type RMSHORTS struct{ mmio.UM32 }

func (rm RMSHORTS) Load() SHORTS   { return SHORTS(rm.UM32.Load()) }
func (rm RMSHORTS) Store(b SHORTS) { rm.UM32.Store(uint32(b)) }

func END_START_(p *Periph) RMSHORTS {
	return RMSHORTS{mmio.UM32{&p.SHORTS.U32, uint32(END_START)}}
}

type INTENSET uint32

type RINTENSET struct{ mmio.U32 }

func (r *RINTENSET) LoadBits(mask INTENSET) INTENSET { return INTENSET(r.U32.LoadBits(uint32(mask))) }
func (r *RINTENSET) StoreBits(mask, b INTENSET)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINTENSET) SetBits(mask INTENSET)           { r.U32.SetBits(uint32(mask)) }
func (r *RINTENSET) ClearBits(mask INTENSET)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINTENSET) Load() INTENSET                  { return INTENSET(r.U32.Load()) }
func (r *RINTENSET) Store(b INTENSET)                { r.U32.Store(uint32(b)) }

type RMINTENSET struct{ mmio.UM32 }

func (rm RMINTENSET) Load() INTENSET   { return INTENSET(rm.UM32.Load()) }
func (rm RMINTENSET) Store(b INTENSET) { rm.UM32.Store(uint32(b)) }

type INTENCLR uint32

type RINTENCLR struct{ mmio.U32 }

func (r *RINTENCLR) LoadBits(mask INTENCLR) INTENCLR { return INTENCLR(r.U32.LoadBits(uint32(mask))) }
func (r *RINTENCLR) StoreBits(mask, b INTENCLR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINTENCLR) SetBits(mask INTENCLR)           { r.U32.SetBits(uint32(mask)) }
func (r *RINTENCLR) ClearBits(mask INTENCLR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINTENCLR) Load() INTENCLR                  { return INTENCLR(r.U32.Load()) }
func (r *RINTENCLR) Store(b INTENCLR)                { r.U32.Store(uint32(b)) }

type RMINTENCLR struct{ mmio.UM32 }

func (rm RMINTENCLR) Load() INTENCLR   { return INTENCLR(rm.UM32.Load()) }
func (rm RMINTENCLR) Store(b INTENCLR) { rm.UM32.Store(uint32(b)) }

type STALLSTAT uint32

type RSTALLSTAT struct{ mmio.U32 }

func (r *RSTALLSTAT) LoadBits(mask STALLSTAT) STALLSTAT {
	return STALLSTAT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSTALLSTAT) StoreBits(mask, b STALLSTAT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSTALLSTAT) SetBits(mask STALLSTAT)      { r.U32.SetBits(uint32(mask)) }
func (r *RSTALLSTAT) ClearBits(mask STALLSTAT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSTALLSTAT) Load() STALLSTAT             { return STALLSTAT(r.U32.Load()) }
func (r *RSTALLSTAT) Store(b STALLSTAT)           { r.U32.Store(uint32(b)) }

type RMSTALLSTAT struct{ mmio.UM32 }

func (rm RMSTALLSTAT) Load() STALLSTAT   { return STALLSTAT(rm.UM32.Load()) }
func (rm RMSTALLSTAT) Store(b STALLSTAT) { rm.UM32.Store(uint32(b)) }

func TX_(p *Periph) RMSTALLSTAT {
	return RMSTALLSTAT{mmio.UM32{&p.STALLSTAT.U32, uint32(TX)}}
}

func RX_(p *Periph) RMSTALLSTAT {
	return RMSTALLSTAT{mmio.UM32{&p.STALLSTAT.U32, uint32(RX)}}
}

type ENABLE uint32

type RENABLE struct{ mmio.U32 }

func (r *RENABLE) LoadBits(mask ENABLE) ENABLE { return ENABLE(r.U32.LoadBits(uint32(mask))) }
func (r *RENABLE) StoreBits(mask, b ENABLE)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RENABLE) SetBits(mask ENABLE)         { r.U32.SetBits(uint32(mask)) }
func (r *RENABLE) ClearBits(mask ENABLE)       { r.U32.ClearBits(uint32(mask)) }
func (r *RENABLE) Load() ENABLE                { return ENABLE(r.U32.Load()) }
func (r *RENABLE) Store(b ENABLE)              { r.U32.Store(uint32(b)) }

type RMENABLE struct{ mmio.UM32 }

func (rm RMENABLE) Load() ENABLE   { return ENABLE(rm.UM32.Load()) }
func (rm RMENABLE) Store(b ENABLE) { rm.UM32.Store(uint32(b)) }

func EN_(p *Periph) RMENABLE {
	return RMENABLE{mmio.UM32{&p.ENABLE.U32, uint32(EN)}}
}

type PSEL_SCK uint32

type RPSEL_SCK struct{ mmio.U32 }

func (r *RPSEL_SCK) LoadBits(mask PSEL_SCK) PSEL_SCK { return PSEL_SCK(r.U32.LoadBits(uint32(mask))) }
func (r *RPSEL_SCK) StoreBits(mask, b PSEL_SCK)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_SCK) SetBits(mask PSEL_SCK)           { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_SCK) ClearBits(mask PSEL_SCK)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_SCK) Load() PSEL_SCK                  { return PSEL_SCK(r.U32.Load()) }
func (r *RPSEL_SCK) Store(b PSEL_SCK)                { r.U32.Store(uint32(b)) }

type RMPSEL_SCK struct{ mmio.UM32 }

func (rm RMPSEL_SCK) Load() PSEL_SCK   { return PSEL_SCK(rm.UM32.Load()) }
func (rm RMPSEL_SCK) Store(b PSEL_SCK) { rm.UM32.Store(uint32(b)) }

type PSEL_MOSI uint32

type RPSEL_MOSI struct{ mmio.U32 }

func (r *RPSEL_MOSI) LoadBits(mask PSEL_MOSI) PSEL_MOSI {
	return PSEL_MOSI(r.U32.LoadBits(uint32(mask)))
}
func (r *RPSEL_MOSI) StoreBits(mask, b PSEL_MOSI) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_MOSI) SetBits(mask PSEL_MOSI)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_MOSI) ClearBits(mask PSEL_MOSI)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_MOSI) Load() PSEL_MOSI             { return PSEL_MOSI(r.U32.Load()) }
func (r *RPSEL_MOSI) Store(b PSEL_MOSI)           { r.U32.Store(uint32(b)) }

type RMPSEL_MOSI struct{ mmio.UM32 }

func (rm RMPSEL_MOSI) Load() PSEL_MOSI   { return PSEL_MOSI(rm.UM32.Load()) }
func (rm RMPSEL_MOSI) Store(b PSEL_MOSI) { rm.UM32.Store(uint32(b)) }

type PSEL_MISO uint32

type RPSEL_MISO struct{ mmio.U32 }

func (r *RPSEL_MISO) LoadBits(mask PSEL_MISO) PSEL_MISO {
	return PSEL_MISO(r.U32.LoadBits(uint32(mask)))
}
func (r *RPSEL_MISO) StoreBits(mask, b PSEL_MISO) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_MISO) SetBits(mask PSEL_MISO)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_MISO) ClearBits(mask PSEL_MISO)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_MISO) Load() PSEL_MISO             { return PSEL_MISO(r.U32.Load()) }
func (r *RPSEL_MISO) Store(b PSEL_MISO)           { r.U32.Store(uint32(b)) }

type RMPSEL_MISO struct{ mmio.UM32 }

func (rm RMPSEL_MISO) Load() PSEL_MISO   { return PSEL_MISO(rm.UM32.Load()) }
func (rm RMPSEL_MISO) Store(b PSEL_MISO) { rm.UM32.Store(uint32(b)) }

type PSEL_CSN uint32

type RPSEL_CSN struct{ mmio.U32 }

func (r *RPSEL_CSN) LoadBits(mask PSEL_CSN) PSEL_CSN { return PSEL_CSN(r.U32.LoadBits(uint32(mask))) }
func (r *RPSEL_CSN) StoreBits(mask, b PSEL_CSN)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_CSN) SetBits(mask PSEL_CSN)           { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_CSN) ClearBits(mask PSEL_CSN)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_CSN) Load() PSEL_CSN                  { return PSEL_CSN(r.U32.Load()) }
func (r *RPSEL_CSN) Store(b PSEL_CSN)                { r.U32.Store(uint32(b)) }

type RMPSEL_CSN struct{ mmio.UM32 }

func (rm RMPSEL_CSN) Load() PSEL_CSN   { return PSEL_CSN(rm.UM32.Load()) }
func (rm RMPSEL_CSN) Store(b PSEL_CSN) { rm.UM32.Store(uint32(b)) }

type FREQUENCY uint32

type RFREQUENCY struct{ mmio.U32 }

func (r *RFREQUENCY) LoadBits(mask FREQUENCY) FREQUENCY {
	return FREQUENCY(r.U32.LoadBits(uint32(mask)))
}
func (r *RFREQUENCY) StoreBits(mask, b FREQUENCY) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFREQUENCY) SetBits(mask FREQUENCY)      { r.U32.SetBits(uint32(mask)) }
func (r *RFREQUENCY) ClearBits(mask FREQUENCY)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFREQUENCY) Load() FREQUENCY             { return FREQUENCY(r.U32.Load()) }
func (r *RFREQUENCY) Store(b FREQUENCY)           { r.U32.Store(uint32(b)) }

type RMFREQUENCY struct{ mmio.UM32 }

func (rm RMFREQUENCY) Load() FREQUENCY   { return FREQUENCY(rm.UM32.Load()) }
func (rm RMFREQUENCY) Store(b FREQUENCY) { rm.UM32.Store(uint32(b)) }

func FREQ_(p *Periph) RMFREQUENCY {
	return RMFREQUENCY{mmio.UM32{&p.FREQUENCY.U32, uint32(FREQ)}}
}

type RXD_PTR uint32

type RRXD_PTR struct{ mmio.U32 }

func (r *RRXD_PTR) LoadBits(mask RXD_PTR) RXD_PTR { return RXD_PTR(r.U32.LoadBits(uint32(mask))) }
func (r *RRXD_PTR) StoreBits(mask, b RXD_PTR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD_PTR) SetBits(mask RXD_PTR)          { r.U32.SetBits(uint32(mask)) }
func (r *RRXD_PTR) ClearBits(mask RXD_PTR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD_PTR) Load() RXD_PTR                 { return RXD_PTR(r.U32.Load()) }
func (r *RRXD_PTR) Store(b RXD_PTR)               { r.U32.Store(uint32(b)) }

type RMRXD_PTR struct{ mmio.UM32 }

func (rm RMRXD_PTR) Load() RXD_PTR   { return RXD_PTR(rm.UM32.Load()) }
func (rm RMRXD_PTR) Store(b RXD_PTR) { rm.UM32.Store(uint32(b)) }

type RXD_MAXCNT uint32

type RRXD_MAXCNT struct{ mmio.U32 }

func (r *RRXD_MAXCNT) LoadBits(mask RXD_MAXCNT) RXD_MAXCNT {
	return RXD_MAXCNT(r.U32.LoadBits(uint32(mask)))
}
func (r *RRXD_MAXCNT) StoreBits(mask, b RXD_MAXCNT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD_MAXCNT) SetBits(mask RXD_MAXCNT)      { r.U32.SetBits(uint32(mask)) }
func (r *RRXD_MAXCNT) ClearBits(mask RXD_MAXCNT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD_MAXCNT) Load() RXD_MAXCNT             { return RXD_MAXCNT(r.U32.Load()) }
func (r *RRXD_MAXCNT) Store(b RXD_MAXCNT)           { r.U32.Store(uint32(b)) }

type RMRXD_MAXCNT struct{ mmio.UM32 }

func (rm RMRXD_MAXCNT) Load() RXD_MAXCNT   { return RXD_MAXCNT(rm.UM32.Load()) }
func (rm RMRXD_MAXCNT) Store(b RXD_MAXCNT) { rm.UM32.Store(uint32(b)) }

func MAXCNT_(p *Periph) RMRXD_MAXCNT {
	return RMRXD_MAXCNT{mmio.UM32{&p.RXD_MAXCNT.U32, uint32(MAXCNT)}}
}

type RXD_AMOUNT uint32

type RRXD_AMOUNT struct{ mmio.U32 }

func (r *RRXD_AMOUNT) LoadBits(mask RXD_AMOUNT) RXD_AMOUNT {
	return RXD_AMOUNT(r.U32.LoadBits(uint32(mask)))
}
func (r *RRXD_AMOUNT) StoreBits(mask, b RXD_AMOUNT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD_AMOUNT) SetBits(mask RXD_AMOUNT)      { r.U32.SetBits(uint32(mask)) }
func (r *RRXD_AMOUNT) ClearBits(mask RXD_AMOUNT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD_AMOUNT) Load() RXD_AMOUNT             { return RXD_AMOUNT(r.U32.Load()) }
func (r *RRXD_AMOUNT) Store(b RXD_AMOUNT)           { r.U32.Store(uint32(b)) }

type RMRXD_AMOUNT struct{ mmio.UM32 }

func (rm RMRXD_AMOUNT) Load() RXD_AMOUNT   { return RXD_AMOUNT(rm.UM32.Load()) }
func (rm RMRXD_AMOUNT) Store(b RXD_AMOUNT) { rm.UM32.Store(uint32(b)) }

func AMOUNT_(p *Periph) RMRXD_AMOUNT {
	return RMRXD_AMOUNT{mmio.UM32{&p.RXD_AMOUNT.U32, uint32(AMOUNT)}}
}

type RXD_LIST uint32

type RRXD_LIST struct{ mmio.U32 }

func (r *RRXD_LIST) LoadBits(mask RXD_LIST) RXD_LIST { return RXD_LIST(r.U32.LoadBits(uint32(mask))) }
func (r *RRXD_LIST) StoreBits(mask, b RXD_LIST)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD_LIST) SetBits(mask RXD_LIST)           { r.U32.SetBits(uint32(mask)) }
func (r *RRXD_LIST) ClearBits(mask RXD_LIST)         { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD_LIST) Load() RXD_LIST                  { return RXD_LIST(r.U32.Load()) }
func (r *RRXD_LIST) Store(b RXD_LIST)                { r.U32.Store(uint32(b)) }

type RMRXD_LIST struct{ mmio.UM32 }

func (rm RMRXD_LIST) Load() RXD_LIST   { return RXD_LIST(rm.UM32.Load()) }
func (rm RMRXD_LIST) Store(b RXD_LIST) { rm.UM32.Store(uint32(b)) }

func LIST_(p *Periph) RMRXD_LIST {
	return RMRXD_LIST{mmio.UM32{&p.RXD_LIST.U32, uint32(LIST)}}
}

type TXD_PTR uint32

type RTXD_PTR struct{ mmio.U32 }

func (r *RTXD_PTR) LoadBits(mask TXD_PTR) TXD_PTR { return TXD_PTR(r.U32.LoadBits(uint32(mask))) }
func (r *RTXD_PTR) StoreBits(mask, b TXD_PTR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD_PTR) SetBits(mask TXD_PTR)          { r.U32.SetBits(uint32(mask)) }
func (r *RTXD_PTR) ClearBits(mask TXD_PTR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD_PTR) Load() TXD_PTR                 { return TXD_PTR(r.U32.Load()) }
func (r *RTXD_PTR) Store(b TXD_PTR)               { r.U32.Store(uint32(b)) }

type RMTXD_PTR struct{ mmio.UM32 }

func (rm RMTXD_PTR) Load() TXD_PTR   { return TXD_PTR(rm.UM32.Load()) }
func (rm RMTXD_PTR) Store(b TXD_PTR) { rm.UM32.Store(uint32(b)) }

type TXD_MAXCNT uint32

type RTXD_MAXCNT struct{ mmio.U32 }

func (r *RTXD_MAXCNT) LoadBits(mask TXD_MAXCNT) TXD_MAXCNT {
	return TXD_MAXCNT(r.U32.LoadBits(uint32(mask)))
}
func (r *RTXD_MAXCNT) StoreBits(mask, b TXD_MAXCNT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD_MAXCNT) SetBits(mask TXD_MAXCNT)      { r.U32.SetBits(uint32(mask)) }
func (r *RTXD_MAXCNT) ClearBits(mask TXD_MAXCNT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD_MAXCNT) Load() TXD_MAXCNT             { return TXD_MAXCNT(r.U32.Load()) }
func (r *RTXD_MAXCNT) Store(b TXD_MAXCNT)           { r.U32.Store(uint32(b)) }

type RMTXD_MAXCNT struct{ mmio.UM32 }

func (rm RMTXD_MAXCNT) Load() TXD_MAXCNT   { return TXD_MAXCNT(rm.UM32.Load()) }
func (rm RMTXD_MAXCNT) Store(b TXD_MAXCNT) { rm.UM32.Store(uint32(b)) }

func MAXCNT_(p *Periph) RMTXD_MAXCNT {
	return RMTXD_MAXCNT{mmio.UM32{&p.TXD_MAXCNT.U32, uint32(MAXCNT)}}
}

type TXD_AMOUNT uint32

type RTXD_AMOUNT struct{ mmio.U32 }

func (r *RTXD_AMOUNT) LoadBits(mask TXD_AMOUNT) TXD_AMOUNT {
	return TXD_AMOUNT(r.U32.LoadBits(uint32(mask)))
}
func (r *RTXD_AMOUNT) StoreBits(mask, b TXD_AMOUNT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD_AMOUNT) SetBits(mask TXD_AMOUNT)      { r.U32.SetBits(uint32(mask)) }
func (r *RTXD_AMOUNT) ClearBits(mask TXD_AMOUNT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD_AMOUNT) Load() TXD_AMOUNT             { return TXD_AMOUNT(r.U32.Load()) }
func (r *RTXD_AMOUNT) Store(b TXD_AMOUNT)           { r.U32.Store(uint32(b)) }

type RMTXD_AMOUNT struct{ mmio.UM32 }

func (rm RMTXD_AMOUNT) Load() TXD_AMOUNT   { return TXD_AMOUNT(rm.UM32.Load()) }
func (rm RMTXD_AMOUNT) Store(b TXD_AMOUNT) { rm.UM32.Store(uint32(b)) }

func AMOUNT_(p *Periph) RMTXD_AMOUNT {
	return RMTXD_AMOUNT{mmio.UM32{&p.TXD_AMOUNT.U32, uint32(AMOUNT)}}
}

type TXD_LIST uint32

type RTXD_LIST struct{ mmio.U32 }

func (r *RTXD_LIST) LoadBits(mask TXD_LIST) TXD_LIST { return TXD_LIST(r.U32.LoadBits(uint32(mask))) }
func (r *RTXD_LIST) StoreBits(mask, b TXD_LIST)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD_LIST) SetBits(mask TXD_LIST)           { r.U32.SetBits(uint32(mask)) }
func (r *RTXD_LIST) ClearBits(mask TXD_LIST)         { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD_LIST) Load() TXD_LIST                  { return TXD_LIST(r.U32.Load()) }
func (r *RTXD_LIST) Store(b TXD_LIST)                { r.U32.Store(uint32(b)) }

type RMTXD_LIST struct{ mmio.UM32 }

func (rm RMTXD_LIST) Load() TXD_LIST   { return TXD_LIST(rm.UM32.Load()) }
func (rm RMTXD_LIST) Store(b TXD_LIST) { rm.UM32.Store(uint32(b)) }

func LIST_(p *Periph) RMTXD_LIST {
	return RMTXD_LIST{mmio.UM32{&p.TXD_LIST.U32, uint32(LIST)}}
}

type CONFIG uint32

type RCONFIG struct{ mmio.U32 }

func (r *RCONFIG) LoadBits(mask CONFIG) CONFIG { return CONFIG(r.U32.LoadBits(uint32(mask))) }
func (r *RCONFIG) StoreBits(mask, b CONFIG)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCONFIG) SetBits(mask CONFIG)         { r.U32.SetBits(uint32(mask)) }
func (r *RCONFIG) ClearBits(mask CONFIG)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCONFIG) Load() CONFIG                { return CONFIG(r.U32.Load()) }
func (r *RCONFIG) Store(b CONFIG)              { r.U32.Store(uint32(b)) }

type RMCONFIG struct{ mmio.UM32 }

func (rm RMCONFIG) Load() CONFIG   { return CONFIG(rm.UM32.Load()) }
func (rm RMCONFIG) Store(b CONFIG) { rm.UM32.Store(uint32(b)) }

func ORDER_(p *Periph) RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(ORDER)}}
}

func CPHA_(p *Periph) RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(CPHA)}}
}

func CPOL_(p *Periph) RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(CPOL)}}
}

type IFTIMING_RXDELAY uint32

type RIFTIMING_RXDELAY struct{ mmio.U32 }

func (r *RIFTIMING_RXDELAY) LoadBits(mask IFTIMING_RXDELAY) IFTIMING_RXDELAY {
	return IFTIMING_RXDELAY(r.U32.LoadBits(uint32(mask)))
}
func (r *RIFTIMING_RXDELAY) StoreBits(mask, b IFTIMING_RXDELAY) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RIFTIMING_RXDELAY) SetBits(mask IFTIMING_RXDELAY)   { r.U32.SetBits(uint32(mask)) }
func (r *RIFTIMING_RXDELAY) ClearBits(mask IFTIMING_RXDELAY) { r.U32.ClearBits(uint32(mask)) }
func (r *RIFTIMING_RXDELAY) Load() IFTIMING_RXDELAY          { return IFTIMING_RXDELAY(r.U32.Load()) }
func (r *RIFTIMING_RXDELAY) Store(b IFTIMING_RXDELAY)        { r.U32.Store(uint32(b)) }

type RMIFTIMING_RXDELAY struct{ mmio.UM32 }

func (rm RMIFTIMING_RXDELAY) Load() IFTIMING_RXDELAY   { return IFTIMING_RXDELAY(rm.UM32.Load()) }
func (rm RMIFTIMING_RXDELAY) Store(b IFTIMING_RXDELAY) { rm.UM32.Store(uint32(b)) }

func RXDELAY_(p *Periph) RMIFTIMING_RXDELAY {
	return RMIFTIMING_RXDELAY{mmio.UM32{&p.IFTIMING_RXDELAY.U32, uint32(RXDELAY)}}
}

type IFTIMING_CSNDUR uint32

type RIFTIMING_CSNDUR struct{ mmio.U32 }

func (r *RIFTIMING_CSNDUR) LoadBits(mask IFTIMING_CSNDUR) IFTIMING_CSNDUR {
	return IFTIMING_CSNDUR(r.U32.LoadBits(uint32(mask)))
}
func (r *RIFTIMING_CSNDUR) StoreBits(mask, b IFTIMING_CSNDUR) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RIFTIMING_CSNDUR) SetBits(mask IFTIMING_CSNDUR)   { r.U32.SetBits(uint32(mask)) }
func (r *RIFTIMING_CSNDUR) ClearBits(mask IFTIMING_CSNDUR) { r.U32.ClearBits(uint32(mask)) }
func (r *RIFTIMING_CSNDUR) Load() IFTIMING_CSNDUR          { return IFTIMING_CSNDUR(r.U32.Load()) }
func (r *RIFTIMING_CSNDUR) Store(b IFTIMING_CSNDUR)        { r.U32.Store(uint32(b)) }

type RMIFTIMING_CSNDUR struct{ mmio.UM32 }

func (rm RMIFTIMING_CSNDUR) Load() IFTIMING_CSNDUR   { return IFTIMING_CSNDUR(rm.UM32.Load()) }
func (rm RMIFTIMING_CSNDUR) Store(b IFTIMING_CSNDUR) { rm.UM32.Store(uint32(b)) }

func CSNDUR_(p *Periph) RMIFTIMING_CSNDUR {
	return RMIFTIMING_CSNDUR{mmio.UM32{&p.IFTIMING_CSNDUR.U32, uint32(CSNDUR)}}
}

type CSNPOL uint32

type RCSNPOL struct{ mmio.U32 }

func (r *RCSNPOL) LoadBits(mask CSNPOL) CSNPOL { return CSNPOL(r.U32.LoadBits(uint32(mask))) }
func (r *RCSNPOL) StoreBits(mask, b CSNPOL)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSNPOL) SetBits(mask CSNPOL)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSNPOL) ClearBits(mask CSNPOL)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSNPOL) Load() CSNPOL                { return CSNPOL(r.U32.Load()) }
func (r *RCSNPOL) Store(b CSNPOL)              { r.U32.Store(uint32(b)) }

type RMCSNPOL struct{ mmio.UM32 }

func (rm RMCSNPOL) Load() CSNPOL   { return CSNPOL(rm.UM32.Load()) }
func (rm RMCSNPOL) Store(b CSNPOL) { rm.UM32.Store(uint32(b)) }

func CSNPOL_(p *Periph) RMCSNPOL {
	return RMCSNPOL{mmio.UM32{&p.CSNPOL.U32, uint32(CSNPOL)}}
}

type PSELDCX uint32

type RPSELDCX struct{ mmio.U32 }

func (r *RPSELDCX) LoadBits(mask PSELDCX) PSELDCX { return PSELDCX(r.U32.LoadBits(uint32(mask))) }
func (r *RPSELDCX) StoreBits(mask, b PSELDCX)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSELDCX) SetBits(mask PSELDCX)          { r.U32.SetBits(uint32(mask)) }
func (r *RPSELDCX) ClearBits(mask PSELDCX)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPSELDCX) Load() PSELDCX                 { return PSELDCX(r.U32.Load()) }
func (r *RPSELDCX) Store(b PSELDCX)               { r.U32.Store(uint32(b)) }

type RMPSELDCX struct{ mmio.UM32 }

func (rm RMPSELDCX) Load() PSELDCX   { return PSELDCX(rm.UM32.Load()) }
func (rm RMPSELDCX) Store(b PSELDCX) { rm.UM32.Store(uint32(b)) }

func PIN_(p *Periph) RMPSELDCX {
	return RMPSELDCX{mmio.UM32{&p.PSELDCX.U32, uint32(PIN)}}
}

func PORT_(p *Periph) RMPSELDCX {
	return RMPSELDCX{mmio.UM32{&p.PSELDCX.U32, uint32(PORT)}}
}

func CONNECT_(p *Periph) RMPSELDCX {
	return RMPSELDCX{mmio.UM32{&p.PSELDCX.U32, uint32(CONNECT)}}
}

type DCXCNT uint32

type RDCXCNT struct{ mmio.U32 }

func (r *RDCXCNT) LoadBits(mask DCXCNT) DCXCNT { return DCXCNT(r.U32.LoadBits(uint32(mask))) }
func (r *RDCXCNT) StoreBits(mask, b DCXCNT)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDCXCNT) SetBits(mask DCXCNT)         { r.U32.SetBits(uint32(mask)) }
func (r *RDCXCNT) ClearBits(mask DCXCNT)       { r.U32.ClearBits(uint32(mask)) }
func (r *RDCXCNT) Load() DCXCNT                { return DCXCNT(r.U32.Load()) }
func (r *RDCXCNT) Store(b DCXCNT)              { r.U32.Store(uint32(b)) }

type RMDCXCNT struct{ mmio.UM32 }

func (rm RMDCXCNT) Load() DCXCNT   { return DCXCNT(rm.UM32.Load()) }
func (rm RMDCXCNT) Store(b DCXCNT) { rm.UM32.Store(uint32(b)) }

func DCXCNT_(p *Periph) RMDCXCNT {
	return RMDCXCNT{mmio.UM32{&p.DCXCNT.U32, uint32(DCXCNT)}}
}

type ORC uint32

type RORC struct{ mmio.U32 }

func (r *RORC) LoadBits(mask ORC) ORC { return ORC(r.U32.LoadBits(uint32(mask))) }
func (r *RORC) StoreBits(mask, b ORC) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RORC) SetBits(mask ORC)      { r.U32.SetBits(uint32(mask)) }
func (r *RORC) ClearBits(mask ORC)    { r.U32.ClearBits(uint32(mask)) }
func (r *RORC) Load() ORC             { return ORC(r.U32.Load()) }
func (r *RORC) Store(b ORC)           { r.U32.Store(uint32(b)) }

type RMORC struct{ mmio.UM32 }

func (rm RMORC) Load() ORC   { return ORC(rm.UM32.Load()) }
func (rm RMORC) Store(b ORC) { rm.UM32.Store(uint32(b)) }

func ORC_(p *Periph) RMORC {
	return RMORC{mmio.UM32{&p.ORC.U32, uint32(ORC)}}
}
