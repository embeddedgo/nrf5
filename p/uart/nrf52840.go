// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52840

// Package uart provides access to the registers of the UART0 peripheral.
//
// Instances:
//  UART0  UART0_BASE  -  UARTE0_UART0*  Universal Asynchronous Receiver/Transmitter
// Registers:
//  0x508 32  RTS            Pin select for RTS
//  0x50C 32  TXD            Pin select for TXD
//  0x510 32  CTS            Pin select for CTS
//  0x514 32  RXD            Pin select for RXD
//  0x000 32  TASKS_STARTRX  Start UART receiver
//  0x004 32  TASKS_STOPRX   Stop UART receiver
//  0x008 32  TASKS_STARTTX  Start UART transmitter
//  0x00C 32  TASKS_STOPTX   Stop UART transmitter
//  0x01C 32  TASKS_SUSPEND  Suspend UART
//  0x100 32  EVENTS_CTS     CTS is activated (set low). Clear To Send.
//  0x104 32  EVENTS_NCTS    CTS is deactivated (set high). Not Clear To Send.
//  0x108 32  EVENTS_RXDRDY  Data received in RXD
//  0x11C 32  EVENTS_TXDRDY  Data sent from TXD
//  0x124 32  EVENTS_ERROR   Error detected
//  0x144 32  EVENTS_RXTO    Receiver timeout
//  0x200 32  SHORTS         Shortcuts between local events and tasks
//  0x304 32  INTENSET       Enable interrupt
//  0x308 32  INTENCLR       Disable interrupt
//  0x480 32  ERRORSRC       Error source
//  0x500 32  ENABLE         Enable UART
//  0x518 32  RXD            RXD register
//  0x51C 32  TXD            TXD register
//  0x524 32  BAUDRATE       Baud rate. Accuracy depends on the HFCLK source selected.
//  0x56C 32  CONFIG         Configuration of parity and hardware flow control
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package uart

const (
	PIN          RTS = 0x1F << 0  //+ Pin number
	PORT         RTS = 0x01 << 5  //+ Port number
	CONNECT      RTS = 0x01 << 31 //+ Connection
	Connected    RTS = 0x00 << 31 //  Connect
	Disconnected RTS = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          TXD = 0x1F << 0  //+ Pin number
	PORT         TXD = 0x01 << 5  //+ Port number
	CONNECT      TXD = 0x01 << 31 //+ Connection
	Connected    TXD = 0x00 << 31 //  Connect
	Disconnected TXD = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          CTS = 0x1F << 0  //+ Pin number
	PORT         CTS = 0x01 << 5  //+ Port number
	CONNECT      CTS = 0x01 << 31 //+ Connection
	Connected    CTS = 0x00 << 31 //  Connect
	Disconnected CTS = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          RXD = 0x1F << 0  //+ Pin number
	PORT         RXD = 0x01 << 5  //+ Port number
	CONNECT      RXD = 0x01 << 31 //+ Connection
	Connected    RXD = 0x00 << 31 //  Connect
	Disconnected RXD = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	CTS_STARTRX SHORTS = 0x01 << 3 //+ Shortcut between event CTS and task STARTRX
	Disabled    SHORTS = 0x00 << 3 //  Disable shortcut
	Enabled     SHORTS = 0x01 << 3 //  Enable shortcut
	NCTS_STOPRX SHORTS = 0x01 << 4 //+ Shortcut between event NCTS and task STOPRX
	Disabled    SHORTS = 0x00 << 4 //  Disable shortcut
	Enabled     SHORTS = 0x01 << 4 //  Enable shortcut
)

const (
	CTS_STARTRXn = 3
	NCTS_STOPRXn = 4
)

const (
	CTS      INTENSET = 0x01 << 0  //+ Write '1' to enable interrupt for event CTS
	Disabled INTENSET = 0x00 << 0  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 0  //  Read: Enabled
	Set      INTENSET = 0x01 << 0  //  Enable
	NCTS     INTENSET = 0x01 << 1  //+ Write '1' to enable interrupt for event NCTS
	Disabled INTENSET = 0x00 << 1  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 1  //  Read: Enabled
	Set      INTENSET = 0x01 << 1  //  Enable
	RXDRDY   INTENSET = 0x01 << 2  //+ Write '1' to enable interrupt for event RXDRDY
	Disabled INTENSET = 0x00 << 2  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 2  //  Read: Enabled
	Set      INTENSET = 0x01 << 2  //  Enable
	TXDRDY   INTENSET = 0x01 << 7  //+ Write '1' to enable interrupt for event TXDRDY
	Disabled INTENSET = 0x00 << 7  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 7  //  Read: Enabled
	Set      INTENSET = 0x01 << 7  //  Enable
	ERROR    INTENSET = 0x01 << 9  //+ Write '1' to enable interrupt for event ERROR
	Disabled INTENSET = 0x00 << 9  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 9  //  Read: Enabled
	Set      INTENSET = 0x01 << 9  //  Enable
	RXTO     INTENSET = 0x01 << 17 //+ Write '1' to enable interrupt for event RXTO
	Disabled INTENSET = 0x00 << 17 //  Read: Disabled
	Enabled  INTENSET = 0x01 << 17 //  Read: Enabled
	Set      INTENSET = 0x01 << 17 //  Enable
)

const (
	CTSn    = 0
	NCTSn   = 1
	RXDRDYn = 2
	TXDRDYn = 7
	ERRORn  = 9
	RXTOn   = 17
)

const (
	CTS      INTENCLR = 0x01 << 0  //+ Write '1' to disable interrupt for event CTS
	Disabled INTENCLR = 0x00 << 0  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 0  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 0  //  Disable
	NCTS     INTENCLR = 0x01 << 1  //+ Write '1' to disable interrupt for event NCTS
	Disabled INTENCLR = 0x00 << 1  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 1  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 1  //  Disable
	RXDRDY   INTENCLR = 0x01 << 2  //+ Write '1' to disable interrupt for event RXDRDY
	Disabled INTENCLR = 0x00 << 2  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 2  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 2  //  Disable
	TXDRDY   INTENCLR = 0x01 << 7  //+ Write '1' to disable interrupt for event TXDRDY
	Disabled INTENCLR = 0x00 << 7  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 7  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 7  //  Disable
	ERROR    INTENCLR = 0x01 << 9  //+ Write '1' to disable interrupt for event ERROR
	Disabled INTENCLR = 0x00 << 9  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 9  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 9  //  Disable
	RXTO     INTENCLR = 0x01 << 17 //+ Write '1' to disable interrupt for event RXTO
	Disabled INTENCLR = 0x00 << 17 //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 17 //  Read: Enabled
	Clear    INTENCLR = 0x01 << 17 //  Disable
)

const (
	CTSn    = 0
	NCTSn   = 1
	RXDRDYn = 2
	TXDRDYn = 7
	ERRORn  = 9
	RXTOn   = 17
)

const (
	OVERRUN    ERRORSRC = 0x01 << 0 //+ Overrun error
	NotPresent ERRORSRC = 0x00 << 0 //  Read: error not present
	Present    ERRORSRC = 0x01 << 0 //  Read: error present
	PARITY     ERRORSRC = 0x01 << 1 //+ Parity error
	NotPresent ERRORSRC = 0x00 << 1 //  Read: error not present
	Present    ERRORSRC = 0x01 << 1 //  Read: error present
	FRAMING    ERRORSRC = 0x01 << 2 //+ Framing error occurred
	NotPresent ERRORSRC = 0x00 << 2 //  Read: error not present
	Present    ERRORSRC = 0x01 << 2 //  Read: error present
	BREAK      ERRORSRC = 0x01 << 3 //+ Break condition
	NotPresent ERRORSRC = 0x00 << 3 //  Read: error not present
	Present    ERRORSRC = 0x01 << 3 //  Read: error present
)

const (
	OVERRUNn = 0
	PARITYn  = 1
	FRAMINGn = 2
	BREAKn   = 3
)

const (
	ENABLE   ENABLE = 0x0F << 0 //+ Enable or disable UART
	Disabled ENABLE = 0x00 << 0 //  Disable UART
	Enabled  ENABLE = 0x04 << 0 //  Enable UART
)

const (
	ENABLEn = 0
)

const (
	RXD RXD = 0xFF << 0 //+ RX data received in previous transfers, double buffered
)

const (
	RXDn = 0
)

const (
	TXD TXD = 0xFF << 0 //+ TX data to be transferred
)

const (
	TXDn = 0
)

const (
	BAUDRATE   BAUDRATE = 0xFFFFFFFF << 0 //+ Baud rate
	Baud1200   BAUDRATE = 0x4F000 << 0    //  1200 baud (actual rate: 1205)
	Baud2400   BAUDRATE = 0x9D000 << 0    //  2400 baud (actual rate: 2396)
	Baud4800   BAUDRATE = 0x13B000 << 0   //  4800 baud (actual rate: 4808)
	Baud9600   BAUDRATE = 0x275000 << 0   //  9600 baud (actual rate: 9598)
	Baud14400  BAUDRATE = 0x3B0000 << 0   //  14400 baud (actual rate: 14414)
	Baud19200  BAUDRATE = 0x4EA000 << 0   //  19200 baud (actual rate: 19208)
	Baud28800  BAUDRATE = 0x75F000 << 0   //  28800 baud (actual rate: 28829)
	Baud31250  BAUDRATE = 0x800000 << 0   //  31250 baud
	Baud38400  BAUDRATE = 0x9D5000 << 0   //  38400 baud (actual rate: 38462)
	Baud56000  BAUDRATE = 0xE50000 << 0   //  56000 baud (actual rate: 55944)
	Baud57600  BAUDRATE = 0xEBF000 << 0   //  57600 baud (actual rate: 57762)
	Baud76800  BAUDRATE = 0x13A9000 << 0  //  76800 baud (actual rate: 76923)
	Baud115200 BAUDRATE = 0x1D7E000 << 0  //  115200 baud (actual rate: 115942)
	Baud230400 BAUDRATE = 0x3AFB000 << 0  //  230400 baud (actual rate: 231884)
	Baud250000 BAUDRATE = 0x4000000 << 0  //  250000 baud
	Baud460800 BAUDRATE = 0x75F7000 << 0  //  460800 baud (actual rate: 470588)
	Baud921600 BAUDRATE = 0xEBED000 << 0  //  921600 baud (actual rate: 941176)
	Baud1M     BAUDRATE = 0x10000000 << 0 //  1Mega baud
)

const (
	BAUDRATEn = 0
)

const (
	HWFC     CONFIG = 0x01 << 0 //+ Hardware flow control
	Disabled CONFIG = 0x00 << 0 //  Disabled
	Enabled  CONFIG = 0x01 << 0 //  Enabled
	PARITY   CONFIG = 0x07 << 1 //+ Parity
	Excluded CONFIG = 0x00 << 1 //  Exclude parity bit
	Included CONFIG = 0x07 << 1 //  Include parity bit
	STOP     CONFIG = 0x01 << 4 //+ Stop bits
	One      CONFIG = 0x00 << 4 //  One stop bit
	Two      CONFIG = 0x01 << 4 //  Two stop bits
)

const (
	HWFCn   = 0
	PARITYn = 1
	STOPn   = 4
)
