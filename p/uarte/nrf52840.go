// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52840

// Package uarte provides access to the registers of the UARTE0 peripheral.
//
// Instances:
//  UARTE0  UARTE0_BASE  -  UARTE0_UART0*  UART with EasyDMA 0
//  UARTE1  UARTE1_BASE  -  UARTE1         UART with EasyDMA 1
// Registers:
//  0x508 32  RTS               Pin select for RTS signal
//  0x50C 32  TXD               Pin select for TXD signal
//  0x510 32  CTS               Pin select for CTS signal
//  0x514 32  RXD               Pin select for RXD signal
//  0x534 32  PTR               Data pointer
//  0x538 32  MAXCNT            Maximum number of bytes in receive buffer
//  0x53C 32  AMOUNT            Number of bytes transferred in the last transaction
//  0x544 32  PTR               Data pointer
//  0x548 32  MAXCNT            Maximum number of bytes in transmit buffer
//  0x54C 32  AMOUNT            Number of bytes transferred in the last transaction
//  0x000 32  TASKS_STARTRX     Start UART receiver
//  0x004 32  TASKS_STOPRX      Stop UART receiver
//  0x008 32  TASKS_STARTTX     Start UART transmitter
//  0x00C 32  TASKS_STOPTX      Stop UART transmitter
//  0x02C 32  TASKS_FLUSHRX     Flush RX FIFO into RX buffer
//  0x100 32  EVENTS_CTS        CTS is activated (set low). Clear To Send.
//  0x104 32  EVENTS_NCTS       CTS is deactivated (set high). Not Clear To Send.
//  0x108 32  EVENTS_RXDRDY     Data received in RXD (but potentially not yet transferred to Data RAM)
//  0x110 32  EVENTS_ENDRX      Receive buffer is filled up
//  0x11C 32  EVENTS_TXDRDY     Data sent from TXD
//  0x120 32  EVENTS_ENDTX      Last TX byte transmitted
//  0x124 32  EVENTS_ERROR      Error detected
//  0x144 32  EVENTS_RXTO       Receiver timeout
//  0x14C 32  EVENTS_RXSTARTED  UART receiver has started
//  0x150 32  EVENTS_TXSTARTED  UART transmitter has started
//  0x158 32  EVENTS_TXSTOPPED  Transmitter stopped
//  0x200 32  SHORTS            Shortcuts between local events and tasks
//  0x300 32  INTEN             Enable or disable interrupt
//  0x304 32  INTENSET          Enable interrupt
//  0x308 32  INTENCLR          Disable interrupt
//  0x480 32  ERRORSRC          Error source Note : this register is read / write one to clear.
//  0x500 32  ENABLE            Enable UART
//  0x524 32  BAUDRATE          Baud rate. Accuracy depends on the HFCLK source selected.
//  0x56C 32  CONFIG            Configuration of parity and hardware flow control
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package uarte

const (
	PIN          RTS = 0x1F << 0  //+ Pin number
	PORT         RTS = 0x01 << 5  //+ Port number
	CONNECT      RTS = 0x01 << 31 //+ Connection
	Connected    RTS = 0x00 << 31 //  Connect
	Disconnected RTS = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          TXD = 0x1F << 0  //+ Pin number
	PORT         TXD = 0x01 << 5  //+ Port number
	CONNECT      TXD = 0x01 << 31 //+ Connection
	Connected    TXD = 0x00 << 31 //  Connect
	Disconnected TXD = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          CTS = 0x1F << 0  //+ Pin number
	PORT         CTS = 0x01 << 5  //+ Port number
	CONNECT      CTS = 0x01 << 31 //+ Connection
	Connected    CTS = 0x00 << 31 //  Connect
	Disconnected CTS = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          RXD = 0x1F << 0  //+ Pin number
	PORT         RXD = 0x01 << 5  //+ Port number
	CONNECT      RXD = 0x01 << 31 //+ Connection
	Connected    RXD = 0x00 << 31 //  Connect
	Disconnected RXD = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PTR PTR = 0xFFFFFFFF << 0 //+ Data pointer
)

const (
	PTRn = 0
)

const (
	MAXCNT MAXCNT = 0xFFFF << 0 //+ Maximum number of bytes in receive buffer
)

const (
	MAXCNTn = 0
)

const (
	AMOUNT AMOUNT = 0xFFFF << 0 //+ Number of bytes transferred in the last transaction
)

const (
	AMOUNTn = 0
)

const (
	PTR PTR = 0xFFFFFFFF << 0 //+ Data pointer
)

const (
	PTRn = 0
)

const (
	MAXCNT MAXCNT = 0xFFFF << 0 //+ Maximum number of bytes in transmit buffer
)

const (
	MAXCNTn = 0
)

const (
	AMOUNT AMOUNT = 0xFFFF << 0 //+ Number of bytes transferred in the last transaction
)

const (
	AMOUNTn = 0
)

const (
	ENDRX_STARTRX SHORTS = 0x01 << 5 //+ Shortcut between event ENDRX and task STARTRX
	Disabled      SHORTS = 0x00 << 5 //  Disable shortcut
	Enabled       SHORTS = 0x01 << 5 //  Enable shortcut
	ENDRX_STOPRX  SHORTS = 0x01 << 6 //+ Shortcut between event ENDRX and task STOPRX
	Disabled      SHORTS = 0x00 << 6 //  Disable shortcut
	Enabled       SHORTS = 0x01 << 6 //  Enable shortcut
)

const (
	ENDRX_STARTRXn = 5
	ENDRX_STOPRXn  = 6
)

const (
	CTS       INTEN = 0x01 << 0  //+ Enable or disable interrupt for event CTS
	Disabled  INTEN = 0x00 << 0  //  Disable
	Enabled   INTEN = 0x01 << 0  //  Enable
	NCTS      INTEN = 0x01 << 1  //+ Enable or disable interrupt for event NCTS
	Disabled  INTEN = 0x00 << 1  //  Disable
	Enabled   INTEN = 0x01 << 1  //  Enable
	RXDRDY    INTEN = 0x01 << 2  //+ Enable or disable interrupt for event RXDRDY
	Disabled  INTEN = 0x00 << 2  //  Disable
	Enabled   INTEN = 0x01 << 2  //  Enable
	ENDRX     INTEN = 0x01 << 4  //+ Enable or disable interrupt for event ENDRX
	Disabled  INTEN = 0x00 << 4  //  Disable
	Enabled   INTEN = 0x01 << 4  //  Enable
	TXDRDY    INTEN = 0x01 << 7  //+ Enable or disable interrupt for event TXDRDY
	Disabled  INTEN = 0x00 << 7  //  Disable
	Enabled   INTEN = 0x01 << 7  //  Enable
	ENDTX     INTEN = 0x01 << 8  //+ Enable or disable interrupt for event ENDTX
	Disabled  INTEN = 0x00 << 8  //  Disable
	Enabled   INTEN = 0x01 << 8  //  Enable
	ERROR     INTEN = 0x01 << 9  //+ Enable or disable interrupt for event ERROR
	Disabled  INTEN = 0x00 << 9  //  Disable
	Enabled   INTEN = 0x01 << 9  //  Enable
	RXTO      INTEN = 0x01 << 17 //+ Enable or disable interrupt for event RXTO
	Disabled  INTEN = 0x00 << 17 //  Disable
	Enabled   INTEN = 0x01 << 17 //  Enable
	RXSTARTED INTEN = 0x01 << 19 //+ Enable or disable interrupt for event RXSTARTED
	Disabled  INTEN = 0x00 << 19 //  Disable
	Enabled   INTEN = 0x01 << 19 //  Enable
	TXSTARTED INTEN = 0x01 << 20 //+ Enable or disable interrupt for event TXSTARTED
	Disabled  INTEN = 0x00 << 20 //  Disable
	Enabled   INTEN = 0x01 << 20 //  Enable
	TXSTOPPED INTEN = 0x01 << 22 //+ Enable or disable interrupt for event TXSTOPPED
	Disabled  INTEN = 0x00 << 22 //  Disable
	Enabled   INTEN = 0x01 << 22 //  Enable
)

const (
	CTSn       = 0
	NCTSn      = 1
	RXDRDYn    = 2
	ENDRXn     = 4
	TXDRDYn    = 7
	ENDTXn     = 8
	ERRORn     = 9
	RXTOn      = 17
	RXSTARTEDn = 19
	TXSTARTEDn = 20
	TXSTOPPEDn = 22
)

const (
	CTS       INTENSET = 0x01 << 0  //+ Write '1' to enable interrupt for event CTS
	Disabled  INTENSET = 0x00 << 0  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 0  //  Read: Enabled
	Set       INTENSET = 0x01 << 0  //  Enable
	NCTS      INTENSET = 0x01 << 1  //+ Write '1' to enable interrupt for event NCTS
	Disabled  INTENSET = 0x00 << 1  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 1  //  Read: Enabled
	Set       INTENSET = 0x01 << 1  //  Enable
	RXDRDY    INTENSET = 0x01 << 2  //+ Write '1' to enable interrupt for event RXDRDY
	Disabled  INTENSET = 0x00 << 2  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 2  //  Read: Enabled
	Set       INTENSET = 0x01 << 2  //  Enable
	ENDRX     INTENSET = 0x01 << 4  //+ Write '1' to enable interrupt for event ENDRX
	Disabled  INTENSET = 0x00 << 4  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 4  //  Read: Enabled
	Set       INTENSET = 0x01 << 4  //  Enable
	TXDRDY    INTENSET = 0x01 << 7  //+ Write '1' to enable interrupt for event TXDRDY
	Disabled  INTENSET = 0x00 << 7  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 7  //  Read: Enabled
	Set       INTENSET = 0x01 << 7  //  Enable
	ENDTX     INTENSET = 0x01 << 8  //+ Write '1' to enable interrupt for event ENDTX
	Disabled  INTENSET = 0x00 << 8  //  Read: Disabled
	Set       INTENSET = 0x01 << 8  //  Enable
	Enabled   INTENSET = 0x01 << 8  //  Read: Enabled
	ERROR     INTENSET = 0x01 << 9  //+ Write '1' to enable interrupt for event ERROR
	Disabled  INTENSET = 0x00 << 9  //  Read: Disabled
	Enabled   INTENSET = 0x01 << 9  //  Read: Enabled
	Set       INTENSET = 0x01 << 9  //  Enable
	RXTO      INTENSET = 0x01 << 17 //+ Write '1' to enable interrupt for event RXTO
	Disabled  INTENSET = 0x00 << 17 //  Read: Disabled
	Enabled   INTENSET = 0x01 << 17 //  Read: Enabled
	Set       INTENSET = 0x01 << 17 //  Enable
	RXSTARTED INTENSET = 0x01 << 19 //+ Write '1' to enable interrupt for event RXSTARTED
	Disabled  INTENSET = 0x00 << 19 //  Read: Disabled
	Set       INTENSET = 0x01 << 19 //  Enable
	Enabled   INTENSET = 0x01 << 19 //  Read: Enabled
	TXSTARTED INTENSET = 0x01 << 20 //+ Write '1' to enable interrupt for event TXSTARTED
	Disabled  INTENSET = 0x00 << 20 //  Read: Disabled
	Set       INTENSET = 0x01 << 20 //  Enable
	Enabled   INTENSET = 0x01 << 20 //  Read: Enabled
	TXSTOPPED INTENSET = 0x01 << 22 //+ Write '1' to enable interrupt for event TXSTOPPED
	Disabled  INTENSET = 0x00 << 22 //  Read: Disabled
	Set       INTENSET = 0x01 << 22 //  Enable
	Enabled   INTENSET = 0x01 << 22 //  Read: Enabled
)

const (
	CTSn       = 0
	NCTSn      = 1
	RXDRDYn    = 2
	ENDRXn     = 4
	TXDRDYn    = 7
	ENDTXn     = 8
	ERRORn     = 9
	RXTOn      = 17
	RXSTARTEDn = 19
	TXSTARTEDn = 20
	TXSTOPPEDn = 22
)

const (
	CTS       INTENCLR = 0x01 << 0  //+ Write '1' to disable interrupt for event CTS
	Disabled  INTENCLR = 0x00 << 0  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 0  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 0  //  Disable
	NCTS      INTENCLR = 0x01 << 1  //+ Write '1' to disable interrupt for event NCTS
	Disabled  INTENCLR = 0x00 << 1  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 1  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 1  //  Disable
	RXDRDY    INTENCLR = 0x01 << 2  //+ Write '1' to disable interrupt for event RXDRDY
	Disabled  INTENCLR = 0x00 << 2  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 2  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 2  //  Disable
	ENDRX     INTENCLR = 0x01 << 4  //+ Write '1' to disable interrupt for event ENDRX
	Disabled  INTENCLR = 0x00 << 4  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 4  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 4  //  Disable
	TXDRDY    INTENCLR = 0x01 << 7  //+ Write '1' to disable interrupt for event TXDRDY
	Disabled  INTENCLR = 0x00 << 7  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 7  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 7  //  Disable
	ENDTX     INTENCLR = 0x01 << 8  //+ Write '1' to disable interrupt for event ENDTX
	Disabled  INTENCLR = 0x00 << 8  //  Read: Disabled
	Clear     INTENCLR = 0x01 << 8  //  Disable
	Enabled   INTENCLR = 0x01 << 8  //  Read: Enabled
	ERROR     INTENCLR = 0x01 << 9  //+ Write '1' to disable interrupt for event ERROR
	Disabled  INTENCLR = 0x00 << 9  //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 9  //  Read: Enabled
	Clear     INTENCLR = 0x01 << 9  //  Disable
	RXTO      INTENCLR = 0x01 << 17 //+ Write '1' to disable interrupt for event RXTO
	Disabled  INTENCLR = 0x00 << 17 //  Read: Disabled
	Enabled   INTENCLR = 0x01 << 17 //  Read: Enabled
	Clear     INTENCLR = 0x01 << 17 //  Disable
	RXSTARTED INTENCLR = 0x01 << 19 //+ Write '1' to disable interrupt for event RXSTARTED
	Disabled  INTENCLR = 0x00 << 19 //  Read: Disabled
	Clear     INTENCLR = 0x01 << 19 //  Disable
	Enabled   INTENCLR = 0x01 << 19 //  Read: Enabled
	TXSTARTED INTENCLR = 0x01 << 20 //+ Write '1' to disable interrupt for event TXSTARTED
	Disabled  INTENCLR = 0x00 << 20 //  Read: Disabled
	Clear     INTENCLR = 0x01 << 20 //  Disable
	Enabled   INTENCLR = 0x01 << 20 //  Read: Enabled
	TXSTOPPED INTENCLR = 0x01 << 22 //+ Write '1' to disable interrupt for event TXSTOPPED
	Disabled  INTENCLR = 0x00 << 22 //  Read: Disabled
	Clear     INTENCLR = 0x01 << 22 //  Disable
	Enabled   INTENCLR = 0x01 << 22 //  Read: Enabled
)

const (
	CTSn       = 0
	NCTSn      = 1
	RXDRDYn    = 2
	ENDRXn     = 4
	TXDRDYn    = 7
	ENDTXn     = 8
	ERRORn     = 9
	RXTOn      = 17
	RXSTARTEDn = 19
	TXSTARTEDn = 20
	TXSTOPPEDn = 22
)

const (
	OVERRUN    ERRORSRC = 0x01 << 0 //+ Overrun error
	NotPresent ERRORSRC = 0x00 << 0 //  Read: error not present
	Present    ERRORSRC = 0x01 << 0 //  Read: error present
	PARITY     ERRORSRC = 0x01 << 1 //+ Parity error
	NotPresent ERRORSRC = 0x00 << 1 //  Read: error not present
	Present    ERRORSRC = 0x01 << 1 //  Read: error present
	FRAMING    ERRORSRC = 0x01 << 2 //+ Framing error occurred
	NotPresent ERRORSRC = 0x00 << 2 //  Read: error not present
	Present    ERRORSRC = 0x01 << 2 //  Read: error present
	BREAK      ERRORSRC = 0x01 << 3 //+ Break condition
	NotPresent ERRORSRC = 0x00 << 3 //  Read: error not present
	Present    ERRORSRC = 0x01 << 3 //  Read: error present
)

const (
	OVERRUNn = 0
	PARITYn  = 1
	FRAMINGn = 2
	BREAKn   = 3
)

const (
	ENABLE   ENABLE = 0x0F << 0 //+ Enable or disable UARTE
	Disabled ENABLE = 0x00 << 0 //  Disable UARTE
	Enabled  ENABLE = 0x08 << 0 //  Enable UARTE
)

const (
	ENABLEn = 0
)

const (
	BAUDRATE   BAUDRATE = 0xFFFFFFFF << 0 //+ Baud rate
	Baud1200   BAUDRATE = 0x4F000 << 0    //  1200 baud (actual rate: 1205)
	Baud2400   BAUDRATE = 0x9D000 << 0    //  2400 baud (actual rate: 2396)
	Baud4800   BAUDRATE = 0x13B000 << 0   //  4800 baud (actual rate: 4808)
	Baud9600   BAUDRATE = 0x275000 << 0   //  9600 baud (actual rate: 9598)
	Baud14400  BAUDRATE = 0x3AF000 << 0   //  14400 baud (actual rate: 14401)
	Baud19200  BAUDRATE = 0x4EA000 << 0   //  19200 baud (actual rate: 19208)
	Baud28800  BAUDRATE = 0x75C000 << 0   //  28800 baud (actual rate: 28777)
	Baud31250  BAUDRATE = 0x800000 << 0   //  31250 baud
	Baud38400  BAUDRATE = 0x9D0000 << 0   //  38400 baud (actual rate: 38369)
	Baud56000  BAUDRATE = 0xE50000 << 0   //  56000 baud (actual rate: 55944)
	Baud57600  BAUDRATE = 0xEB0000 << 0   //  57600 baud (actual rate: 57554)
	Baud76800  BAUDRATE = 0x13A9000 << 0  //  76800 baud (actual rate: 76923)
	Baud115200 BAUDRATE = 0x1D60000 << 0  //  115200 baud (actual rate: 115108)
	Baud230400 BAUDRATE = 0x3B00000 << 0  //  230400 baud (actual rate: 231884)
	Baud250000 BAUDRATE = 0x4000000 << 0  //  250000 baud
	Baud460800 BAUDRATE = 0x7400000 << 0  //  460800 baud (actual rate: 457143)
	Baud921600 BAUDRATE = 0xF000000 << 0  //  921600 baud (actual rate: 941176)
	Baud1M     BAUDRATE = 0x10000000 << 0 //  1Mega baud
)

const (
	BAUDRATEn = 0
)

const (
	HWFC     CONFIG = 0x01 << 0 //+ Hardware flow control
	Disabled CONFIG = 0x00 << 0 //  Disabled
	Enabled  CONFIG = 0x01 << 0 //  Enabled
	PARITY   CONFIG = 0x07 << 1 //+ Parity
	Excluded CONFIG = 0x00 << 1 //  Exclude parity bit
	Included CONFIG = 0x07 << 1 //  Include even parity bit
	STOP     CONFIG = 0x01 << 4 //+ Stop bits
	One      CONFIG = 0x00 << 4 //  One stop bit
	Two      CONFIG = 0x01 << 4 //  Two stop bits
)

const (
	HWFCn   = 0
	PARITYn = 1
	STOPn   = 4
)
