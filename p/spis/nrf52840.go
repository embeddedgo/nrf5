// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52840

// Package spis provides access to the registers of the SPIS0 peripheral.
//
// Instances:
//  SPIS0  SPIS0_BASE  -  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0*  SPI Slave 0
//  SPIS1  SPIS1_BASE  -  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1*  SPI Slave 1
//  SPIS2  SPIS2_BASE  -  SPIM2_SPIS2_SPI2*                   SPI Slave 2
// Registers:
//  0x508 32  SCK              Pin select for SCK
//  0x50C 32  MISO             Pin select for MISO signal
//  0x510 32  MOSI             Pin select for MOSI signal
//  0x514 32  CSN              Pin select for CSN signal
//  0x534 32  PTR              RXD data pointer
//  0x538 32  MAXCNT           Maximum number of bytes in receive buffer
//  0x53C 32  AMOUNT           Number of bytes received in last granted transaction
//  0x540 32  LIST             EasyDMA list type
//  0x544 32  PTR              TXD data pointer
//  0x548 32  MAXCNT           Maximum number of bytes in transmit buffer
//  0x54C 32  AMOUNT           Number of bytes transmitted in last granted transaction
//  0x550 32  LIST             EasyDMA list type
//  0x024 32  TASKS_ACQUIRE    Acquire SPI semaphore
//  0x028 32  TASKS_RELEASE    Release SPI semaphore, enabling the SPI slave to acquire it
//  0x104 32  EVENTS_END       Granted transaction completed
//  0x110 32  EVENTS_ENDRX     End of RXD buffer reached
//  0x128 32  EVENTS_ACQUIRED  Semaphore acquired
//  0x200 32  SHORTS           Shortcuts between local events and tasks
//  0x304 32  INTENSET         Enable interrupt
//  0x308 32  INTENCLR         Disable interrupt
//  0x400 32  SEMSTAT          Semaphore status register
//  0x440 32  STATUS           Status from last transaction
//  0x500 32  ENABLE           Enable SPI slave
//  0x554 32  CONFIG           Configuration register
//  0x55C 32  DEF              Default character. Character clocked out in case of an ignored transaction.
//  0x5C0 32  ORC              Over-read character
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package spis

const (
	PIN          SCK = 0x1F << 0  //+ Pin number
	PORT         SCK = 0x01 << 5  //+ Port number
	CONNECT      SCK = 0x01 << 31 //+ Connection
	Connected    SCK = 0x00 << 31 //  Connect
	Disconnected SCK = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          MISO = 0x1F << 0  //+ Pin number
	PORT         MISO = 0x01 << 5  //+ Port number
	CONNECT      MISO = 0x01 << 31 //+ Connection
	Connected    MISO = 0x00 << 31 //  Connect
	Disconnected MISO = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          MOSI = 0x1F << 0  //+ Pin number
	PORT         MOSI = 0x01 << 5  //+ Port number
	CONNECT      MOSI = 0x01 << 31 //+ Connection
	Connected    MOSI = 0x00 << 31 //  Connect
	Disconnected MOSI = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PIN          CSN = 0x1F << 0  //+ Pin number
	PORT         CSN = 0x01 << 5  //+ Port number
	CONNECT      CSN = 0x01 << 31 //+ Connection
	Connected    CSN = 0x00 << 31 //  Connect
	Disconnected CSN = 0x01 << 31 //  Disconnect
)

const (
	PINn     = 0
	PORTn    = 5
	CONNECTn = 31
)

const (
	PTR PTR = 0xFFFFFFFF << 0 //+ RXD data pointer
)

const (
	PTRn = 0
)

const (
	MAXCNT MAXCNT = 0xFFFF << 0 //+ Maximum number of bytes in receive buffer
)

const (
	MAXCNTn = 0
)

const (
	AMOUNT AMOUNT = 0xFFFF << 0 //+ Number of bytes received in the last granted transaction
)

const (
	AMOUNTn = 0
)

const (
	LIST      LIST = 0x03 << 0 //+ List type
	Disabled  LIST = 0x00 << 0 //  Disable EasyDMA list
	ArrayList LIST = 0x01 << 0 //  Use array list
)

const (
	LISTn = 0
)

const (
	PTR PTR = 0xFFFFFFFF << 0 //+ TXD data pointer
)

const (
	PTRn = 0
)

const (
	MAXCNT MAXCNT = 0xFFFF << 0 //+ Maximum number of bytes in transmit buffer
)

const (
	MAXCNTn = 0
)

const (
	AMOUNT AMOUNT = 0xFFFF << 0 //+ Number of bytes transmitted in last granted transaction
)

const (
	AMOUNTn = 0
)

const (
	LIST      LIST = 0x03 << 0 //+ List type
	Disabled  LIST = 0x00 << 0 //  Disable EasyDMA list
	ArrayList LIST = 0x01 << 0 //  Use array list
)

const (
	LISTn = 0
)

const (
	END_ACQUIRE SHORTS = 0x01 << 2 //+ Shortcut between event END and task ACQUIRE
	Disabled    SHORTS = 0x00 << 2 //  Disable shortcut
	Enabled     SHORTS = 0x01 << 2 //  Enable shortcut
)

const (
	END_ACQUIREn = 2
)

const (
	END      INTENSET = 0x01 << 1  //+ Write '1' to enable interrupt for event END
	Disabled INTENSET = 0x00 << 1  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 1  //  Read: Enabled
	Set      INTENSET = 0x01 << 1  //  Enable
	ENDRX    INTENSET = 0x01 << 4  //+ Write '1' to enable interrupt for event ENDRX
	Disabled INTENSET = 0x00 << 4  //  Read: Disabled
	Enabled  INTENSET = 0x01 << 4  //  Read: Enabled
	Set      INTENSET = 0x01 << 4  //  Enable
	ACQUIRED INTENSET = 0x01 << 10 //+ Write '1' to enable interrupt for event ACQUIRED
	Disabled INTENSET = 0x00 << 10 //  Read: Disabled
	Enabled  INTENSET = 0x01 << 10 //  Read: Enabled
	Set      INTENSET = 0x01 << 10 //  Enable
)

const (
	ENDn      = 1
	ENDRXn    = 4
	ACQUIREDn = 10
)

const (
	END      INTENCLR = 0x01 << 1  //+ Write '1' to disable interrupt for event END
	Disabled INTENCLR = 0x00 << 1  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 1  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 1  //  Disable
	ENDRX    INTENCLR = 0x01 << 4  //+ Write '1' to disable interrupt for event ENDRX
	Disabled INTENCLR = 0x00 << 4  //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 4  //  Read: Enabled
	Clear    INTENCLR = 0x01 << 4  //  Disable
	ACQUIRED INTENCLR = 0x01 << 10 //+ Write '1' to disable interrupt for event ACQUIRED
	Disabled INTENCLR = 0x00 << 10 //  Read: Disabled
	Enabled  INTENCLR = 0x01 << 10 //  Read: Enabled
	Clear    INTENCLR = 0x01 << 10 //  Disable
)

const (
	ENDn      = 1
	ENDRXn    = 4
	ACQUIREDn = 10
)

const (
	SEMSTAT    SEMSTAT = 0x03 << 0 //+ Semaphore status
	Free       SEMSTAT = 0x00 << 0 //  Semaphore is free
	CPU        SEMSTAT = 0x01 << 0 //  Semaphore is assigned to CPU
	SPIS       SEMSTAT = 0x02 << 0 //  Semaphore is assigned to SPI slave
	CPUPending SEMSTAT = 0x03 << 0 //  Semaphore is assigned to SPI but a handover to the CPU is pending
)

const (
	SEMSTATn = 0
)

const (
	OVERREAD   STATUS = 0x01 << 0 //+ TX buffer over-read detected, and prevented
	NotPresent STATUS = 0x00 << 0 //  Read: error not present
	Present    STATUS = 0x01 << 0 //  Read: error present
	Clear      STATUS = 0x01 << 0 //  Write: clear error on writing '1'
	OVERFLOW   STATUS = 0x01 << 1 //+ RX buffer overflow detected, and prevented
	NotPresent STATUS = 0x00 << 1 //  Read: error not present
	Present    STATUS = 0x01 << 1 //  Read: error present
	Clear      STATUS = 0x01 << 1 //  Write: clear error on writing '1'
)

const (
	OVERREADn = 0
	OVERFLOWn = 1
)

const (
	ENABLE   ENABLE = 0x0F << 0 //+ Enable or disable SPI slave
	Disabled ENABLE = 0x00 << 0 //  Disable SPI slave
	Enabled  ENABLE = 0x02 << 0 //  Enable SPI slave
)

const (
	ENABLEn = 0
)

const (
	ORDER      CONFIG = 0x01 << 0 //+ Bit order
	MsbFirst   CONFIG = 0x00 << 0 //  Most significant bit shifted out first
	LsbFirst   CONFIG = 0x01 << 0 //  Least significant bit shifted out first
	CPHA       CONFIG = 0x01 << 1 //+ Serial clock (SCK) phase
	Leading    CONFIG = 0x00 << 1 //  Sample on leading edge of clock, shift serial data on trailing edge
	Trailing   CONFIG = 0x01 << 1 //  Sample on trailing edge of clock, shift serial data on leading edge
	CPOL       CONFIG = 0x01 << 2 //+ Serial clock (SCK) polarity
	ActiveHigh CONFIG = 0x00 << 2 //  Active high
	ActiveLow  CONFIG = 0x01 << 2 //  Active low
)

const (
	ORDERn = 0
	CPHAn  = 1
	CPOLn  = 2
)

const (
	DEF DEF = 0xFF << 0 //+ Default character. Character clocked out in case of an ignored transaction.
)

const (
	DEFn = 0
)

const (
	ORC ORC = 0xFF << 0 //+ Over-read character. Character clocked out after an over-read of the transmit buffer.
)

const (
	ORCn = 0
)
