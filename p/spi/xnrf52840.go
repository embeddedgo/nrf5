// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package spi

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_           [66]uint32
	EVENT_READY REVENT_READY
	_           [126]uint32
	INTENSET    RINTENSET
	INTENCLR    RINTENCLR
	_           [125]uint32
	ENABLE      RENABLE
	_           uint32
	PSEL_SCK    RPSEL_SCK
	PSEL_MOSI   RPSEL_MOSI
	PSEL_MISO   RPSEL_MISO
	_           uint32
	RXD         RRXD
	TXD         RTXD
	_           uint32
	FREQUENCY   RFREQUENCY
	_           [11]uint32
	CONFIG      RCONFIG
}

func SPI0() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI0_BASE))) }
func SPI1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI1_BASE))) }
func SPI2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type EVENT_READY uint32

type REVENT_READY struct{ mmio.U32 }

func (r *REVENT_READY) LoadBits(mask EVENT_READY) EVENT_READY {
	return EVENT_READY(r.U32.LoadBits(uint32(mask)))
}
func (r *REVENT_READY) StoreBits(mask, b EVENT_READY) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REVENT_READY) SetBits(mask EVENT_READY)      { r.U32.SetBits(uint32(mask)) }
func (r *REVENT_READY) ClearBits(mask EVENT_READY)    { r.U32.ClearBits(uint32(mask)) }
func (r *REVENT_READY) Load() EVENT_READY             { return EVENT_READY(r.U32.Load()) }
func (r *REVENT_READY) Store(b EVENT_READY)           { r.U32.Store(uint32(b)) }

type RMEVENT_READY struct{ mmio.UM32 }

func (rm RMEVENT_READY) Load() EVENT_READY   { return EVENT_READY(rm.UM32.Load()) }
func (rm RMEVENT_READY) Store(b EVENT_READY) { rm.UM32.Store(uint32(b)) }

type INTENSET uint32

type RINTENSET struct{ mmio.U32 }

func (r *RINTENSET) LoadBits(mask INTENSET) INTENSET { return INTENSET(r.U32.LoadBits(uint32(mask))) }
func (r *RINTENSET) StoreBits(mask, b INTENSET)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINTENSET) SetBits(mask INTENSET)           { r.U32.SetBits(uint32(mask)) }
func (r *RINTENSET) ClearBits(mask INTENSET)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINTENSET) Load() INTENSET                  { return INTENSET(r.U32.Load()) }
func (r *RINTENSET) Store(b INTENSET)                { r.U32.Store(uint32(b)) }

type RMINTENSET struct{ mmio.UM32 }

func (rm RMINTENSET) Load() INTENSET   { return INTENSET(rm.UM32.Load()) }
func (rm RMINTENSET) Store(b INTENSET) { rm.UM32.Store(uint32(b)) }

type INTENCLR uint32

type RINTENCLR struct{ mmio.U32 }

func (r *RINTENCLR) LoadBits(mask INTENCLR) INTENCLR { return INTENCLR(r.U32.LoadBits(uint32(mask))) }
func (r *RINTENCLR) StoreBits(mask, b INTENCLR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINTENCLR) SetBits(mask INTENCLR)           { r.U32.SetBits(uint32(mask)) }
func (r *RINTENCLR) ClearBits(mask INTENCLR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINTENCLR) Load() INTENCLR                  { return INTENCLR(r.U32.Load()) }
func (r *RINTENCLR) Store(b INTENCLR)                { r.U32.Store(uint32(b)) }

type RMINTENCLR struct{ mmio.UM32 }

func (rm RMINTENCLR) Load() INTENCLR   { return INTENCLR(rm.UM32.Load()) }
func (rm RMINTENCLR) Store(b INTENCLR) { rm.UM32.Store(uint32(b)) }

type ENABLE uint32

type RENABLE struct{ mmio.U32 }

func (r *RENABLE) LoadBits(mask ENABLE) ENABLE { return ENABLE(r.U32.LoadBits(uint32(mask))) }
func (r *RENABLE) StoreBits(mask, b ENABLE)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RENABLE) SetBits(mask ENABLE)         { r.U32.SetBits(uint32(mask)) }
func (r *RENABLE) ClearBits(mask ENABLE)       { r.U32.ClearBits(uint32(mask)) }
func (r *RENABLE) Load() ENABLE                { return ENABLE(r.U32.Load()) }
func (r *RENABLE) Store(b ENABLE)              { r.U32.Store(uint32(b)) }

type RMENABLE struct{ mmio.UM32 }

func (rm RMENABLE) Load() ENABLE   { return ENABLE(rm.UM32.Load()) }
func (rm RMENABLE) Store(b ENABLE) { rm.UM32.Store(uint32(b)) }

func (p *Periph) EN() RMENABLE {
	return RMENABLE{mmio.UM32{&p.ENABLE.U32, uint32(EN)}}
}

type PSEL_SCK uint32

type RPSEL_SCK struct{ mmio.U32 }

func (r *RPSEL_SCK) LoadBits(mask PSEL_SCK) PSEL_SCK { return PSEL_SCK(r.U32.LoadBits(uint32(mask))) }
func (r *RPSEL_SCK) StoreBits(mask, b PSEL_SCK)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_SCK) SetBits(mask PSEL_SCK)           { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_SCK) ClearBits(mask PSEL_SCK)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_SCK) Load() PSEL_SCK                  { return PSEL_SCK(r.U32.Load()) }
func (r *RPSEL_SCK) Store(b PSEL_SCK)                { r.U32.Store(uint32(b)) }

type RMPSEL_SCK struct{ mmio.UM32 }

func (rm RMPSEL_SCK) Load() PSEL_SCK   { return PSEL_SCK(rm.UM32.Load()) }
func (rm RMPSEL_SCK) Store(b PSEL_SCK) { rm.UM32.Store(uint32(b)) }

type PSEL_MOSI uint32

type RPSEL_MOSI struct{ mmio.U32 }

func (r *RPSEL_MOSI) LoadBits(mask PSEL_MOSI) PSEL_MOSI {
	return PSEL_MOSI(r.U32.LoadBits(uint32(mask)))
}
func (r *RPSEL_MOSI) StoreBits(mask, b PSEL_MOSI) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_MOSI) SetBits(mask PSEL_MOSI)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_MOSI) ClearBits(mask PSEL_MOSI)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_MOSI) Load() PSEL_MOSI             { return PSEL_MOSI(r.U32.Load()) }
func (r *RPSEL_MOSI) Store(b PSEL_MOSI)           { r.U32.Store(uint32(b)) }

type RMPSEL_MOSI struct{ mmio.UM32 }

func (rm RMPSEL_MOSI) Load() PSEL_MOSI   { return PSEL_MOSI(rm.UM32.Load()) }
func (rm RMPSEL_MOSI) Store(b PSEL_MOSI) { rm.UM32.Store(uint32(b)) }

type PSEL_MISO uint32

type RPSEL_MISO struct{ mmio.U32 }

func (r *RPSEL_MISO) LoadBits(mask PSEL_MISO) PSEL_MISO {
	return PSEL_MISO(r.U32.LoadBits(uint32(mask)))
}
func (r *RPSEL_MISO) StoreBits(mask, b PSEL_MISO) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSEL_MISO) SetBits(mask PSEL_MISO)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSEL_MISO) ClearBits(mask PSEL_MISO)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSEL_MISO) Load() PSEL_MISO             { return PSEL_MISO(r.U32.Load()) }
func (r *RPSEL_MISO) Store(b PSEL_MISO)           { r.U32.Store(uint32(b)) }

type RMPSEL_MISO struct{ mmio.UM32 }

func (rm RMPSEL_MISO) Load() PSEL_MISO   { return PSEL_MISO(rm.UM32.Load()) }
func (rm RMPSEL_MISO) Store(b PSEL_MISO) { rm.UM32.Store(uint32(b)) }

type RXD uint32

type RRXD struct{ mmio.U32 }

func (r *RRXD) LoadBits(mask RXD) RXD { return RXD(r.U32.LoadBits(uint32(mask))) }
func (r *RRXD) StoreBits(mask, b RXD) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD) SetBits(mask RXD)      { r.U32.SetBits(uint32(mask)) }
func (r *RRXD) ClearBits(mask RXD)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD) Load() RXD             { return RXD(r.U32.Load()) }
func (r *RRXD) Store(b RXD)           { r.U32.Store(uint32(b)) }

type RMRXD struct{ mmio.UM32 }

func (rm RMRXD) Load() RXD   { return RXD(rm.UM32.Load()) }
func (rm RMRXD) Store(b RXD) { rm.UM32.Store(uint32(b)) }

type TXD uint32

type RTXD struct{ mmio.U32 }

func (r *RTXD) LoadBits(mask TXD) TXD { return TXD(r.U32.LoadBits(uint32(mask))) }
func (r *RTXD) StoreBits(mask, b TXD) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD) SetBits(mask TXD)      { r.U32.SetBits(uint32(mask)) }
func (r *RTXD) ClearBits(mask TXD)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD) Load() TXD             { return TXD(r.U32.Load()) }
func (r *RTXD) Store(b TXD)           { r.U32.Store(uint32(b)) }

type RMTXD struct{ mmio.UM32 }

func (rm RMTXD) Load() TXD   { return TXD(rm.UM32.Load()) }
func (rm RMTXD) Store(b TXD) { rm.UM32.Store(uint32(b)) }

type FREQUENCY uint32

type RFREQUENCY struct{ mmio.U32 }

func (r *RFREQUENCY) LoadBits(mask FREQUENCY) FREQUENCY {
	return FREQUENCY(r.U32.LoadBits(uint32(mask)))
}
func (r *RFREQUENCY) StoreBits(mask, b FREQUENCY) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFREQUENCY) SetBits(mask FREQUENCY)      { r.U32.SetBits(uint32(mask)) }
func (r *RFREQUENCY) ClearBits(mask FREQUENCY)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFREQUENCY) Load() FREQUENCY             { return FREQUENCY(r.U32.Load()) }
func (r *RFREQUENCY) Store(b FREQUENCY)           { r.U32.Store(uint32(b)) }

type RMFREQUENCY struct{ mmio.UM32 }

func (rm RMFREQUENCY) Load() FREQUENCY   { return FREQUENCY(rm.UM32.Load()) }
func (rm RMFREQUENCY) Store(b FREQUENCY) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FREQ() RMFREQUENCY {
	return RMFREQUENCY{mmio.UM32{&p.FREQUENCY.U32, uint32(FREQ)}}
}

type CONFIG uint32

type RCONFIG struct{ mmio.U32 }

func (r *RCONFIG) LoadBits(mask CONFIG) CONFIG { return CONFIG(r.U32.LoadBits(uint32(mask))) }
func (r *RCONFIG) StoreBits(mask, b CONFIG)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCONFIG) SetBits(mask CONFIG)         { r.U32.SetBits(uint32(mask)) }
func (r *RCONFIG) ClearBits(mask CONFIG)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCONFIG) Load() CONFIG                { return CONFIG(r.U32.Load()) }
func (r *RCONFIG) Store(b CONFIG)              { r.U32.Store(uint32(b)) }

type RMCONFIG struct{ mmio.UM32 }

func (rm RMCONFIG) Load() CONFIG   { return CONFIG(rm.UM32.Load()) }
func (rm RMCONFIG) Store(b CONFIG) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ORDER() RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(ORDER)}}
}

func (p *Periph) CPHA() RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(CPHA)}}
}

func (p *Periph) CPOL() RMCONFIG {
	return RMCONFIG{mmio.UM32{&p.CONFIG.U32, uint32(CPOL)}}
}
