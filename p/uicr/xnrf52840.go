// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package uicr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_         [5]uint32
	NRFFW     [15]RNRFFW
	NRFHW     [12]RNRFHW
	CUSTOMER  [32]RCUSTOMER
	_         [64]uint32
	PSELRESET [2]RPSELRESET
	APPROTECT RAPPROTECT
	NFCPINS   RNFCPINS
	DEBUGCTRL RDEBUGCTRL
	_         [60]uint32
	REGOUT0   RREGOUT0
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func UICR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UICR_BASE))) }

type NRFFW uint32

type RNRFFW struct{ mmio.U32 }

func (r *RNRFFW) LoadBits(mask NRFFW) NRFFW { return NRFFW(r.U32.LoadBits(uint32(mask))) }
func (r *RNRFFW) StoreBits(mask, b NRFFW)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNRFFW) SetBits(mask NRFFW)        { r.U32.SetBits(uint32(mask)) }
func (r *RNRFFW) ClearBits(mask NRFFW)      { r.U32.ClearBits(uint32(mask)) }
func (r *RNRFFW) Load() NRFFW               { return NRFFW(r.U32.Load()) }
func (r *RNRFFW) Store(b NRFFW)             { r.U32.Store(uint32(b)) }

type RMNRFFW struct{ mmio.UM32 }

func (rm RMNRFFW) Load() NRFFW   { return NRFFW(rm.UM32.Load()) }
func (rm RMNRFFW) Store(b NRFFW) { rm.UM32.Store(uint32(b)) }

type NRFHW uint32

type RNRFHW struct{ mmio.U32 }

func (r *RNRFHW) LoadBits(mask NRFHW) NRFHW { return NRFHW(r.U32.LoadBits(uint32(mask))) }
func (r *RNRFHW) StoreBits(mask, b NRFHW)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNRFHW) SetBits(mask NRFHW)        { r.U32.SetBits(uint32(mask)) }
func (r *RNRFHW) ClearBits(mask NRFHW)      { r.U32.ClearBits(uint32(mask)) }
func (r *RNRFHW) Load() NRFHW               { return NRFHW(r.U32.Load()) }
func (r *RNRFHW) Store(b NRFHW)             { r.U32.Store(uint32(b)) }

type RMNRFHW struct{ mmio.UM32 }

func (rm RMNRFHW) Load() NRFHW   { return NRFHW(rm.UM32.Load()) }
func (rm RMNRFHW) Store(b NRFHW) { rm.UM32.Store(uint32(b)) }

type CUSTOMER uint32

type RCUSTOMER struct{ mmio.U32 }

func (r *RCUSTOMER) LoadBits(mask CUSTOMER) CUSTOMER { return CUSTOMER(r.U32.LoadBits(uint32(mask))) }
func (r *RCUSTOMER) StoreBits(mask, b CUSTOMER)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCUSTOMER) SetBits(mask CUSTOMER)           { r.U32.SetBits(uint32(mask)) }
func (r *RCUSTOMER) ClearBits(mask CUSTOMER)         { r.U32.ClearBits(uint32(mask)) }
func (r *RCUSTOMER) Load() CUSTOMER                  { return CUSTOMER(r.U32.Load()) }
func (r *RCUSTOMER) Store(b CUSTOMER)                { r.U32.Store(uint32(b)) }

type RMCUSTOMER struct{ mmio.UM32 }

func (rm RMCUSTOMER) Load() CUSTOMER   { return CUSTOMER(rm.UM32.Load()) }
func (rm RMCUSTOMER) Store(b CUSTOMER) { rm.UM32.Store(uint32(b)) }

type PSELRESET uint32

type RPSELRESET struct{ mmio.U32 }

func (r *RPSELRESET) LoadBits(mask PSELRESET) PSELRESET {
	return PSELRESET(r.U32.LoadBits(uint32(mask)))
}
func (r *RPSELRESET) StoreBits(mask, b PSELRESET) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPSELRESET) SetBits(mask PSELRESET)      { r.U32.SetBits(uint32(mask)) }
func (r *RPSELRESET) ClearBits(mask PSELRESET)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPSELRESET) Load() PSELRESET             { return PSELRESET(r.U32.Load()) }
func (r *RPSELRESET) Store(b PSELRESET)           { r.U32.Store(uint32(b)) }

type RMPSELRESET struct{ mmio.UM32 }

func (rm RMPSELRESET) Load() PSELRESET   { return PSELRESET(rm.UM32.Load()) }
func (rm RMPSELRESET) Store(b PSELRESET) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PIN(n int) RMPSELRESET {
	return RMPSELRESET{mmio.UM32{&p.PSELRESET[n].U32, uint32(PIN)}}
}

func (p *Periph) PORT(n int) RMPSELRESET {
	return RMPSELRESET{mmio.UM32{&p.PSELRESET[n].U32, uint32(PORT)}}
}

func (p *Periph) CONNECT(n int) RMPSELRESET {
	return RMPSELRESET{mmio.UM32{&p.PSELRESET[n].U32, uint32(CONNECT)}}
}

type APPROTECT uint32

type RAPPROTECT struct{ mmio.U32 }

func (r *RAPPROTECT) LoadBits(mask APPROTECT) APPROTECT {
	return APPROTECT(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPPROTECT) StoreBits(mask, b APPROTECT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPPROTECT) SetBits(mask APPROTECT)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPPROTECT) ClearBits(mask APPROTECT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPPROTECT) Load() APPROTECT             { return APPROTECT(r.U32.Load()) }
func (r *RAPPROTECT) Store(b APPROTECT)           { r.U32.Store(uint32(b)) }

type RMAPPROTECT struct{ mmio.UM32 }

func (rm RMAPPROTECT) Load() APPROTECT   { return APPROTECT(rm.UM32.Load()) }
func (rm RMAPPROTECT) Store(b APPROTECT) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PALL() RMAPPROTECT {
	return RMAPPROTECT{mmio.UM32{&p.APPROTECT.U32, uint32(PALL)}}
}

type NFCPINS uint32

type RNFCPINS struct{ mmio.U32 }

func (r *RNFCPINS) LoadBits(mask NFCPINS) NFCPINS { return NFCPINS(r.U32.LoadBits(uint32(mask))) }
func (r *RNFCPINS) StoreBits(mask, b NFCPINS)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNFCPINS) SetBits(mask NFCPINS)          { r.U32.SetBits(uint32(mask)) }
func (r *RNFCPINS) ClearBits(mask NFCPINS)        { r.U32.ClearBits(uint32(mask)) }
func (r *RNFCPINS) Load() NFCPINS                 { return NFCPINS(r.U32.Load()) }
func (r *RNFCPINS) Store(b NFCPINS)               { r.U32.Store(uint32(b)) }

type RMNFCPINS struct{ mmio.UM32 }

func (rm RMNFCPINS) Load() NFCPINS   { return NFCPINS(rm.UM32.Load()) }
func (rm RMNFCPINS) Store(b NFCPINS) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PROTECT() RMNFCPINS {
	return RMNFCPINS{mmio.UM32{&p.NFCPINS.U32, uint32(PROTECT)}}
}

type DEBUGCTRL uint32

type RDEBUGCTRL struct{ mmio.U32 }

func (r *RDEBUGCTRL) LoadBits(mask DEBUGCTRL) DEBUGCTRL {
	return DEBUGCTRL(r.U32.LoadBits(uint32(mask)))
}
func (r *RDEBUGCTRL) StoreBits(mask, b DEBUGCTRL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDEBUGCTRL) SetBits(mask DEBUGCTRL)      { r.U32.SetBits(uint32(mask)) }
func (r *RDEBUGCTRL) ClearBits(mask DEBUGCTRL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDEBUGCTRL) Load() DEBUGCTRL             { return DEBUGCTRL(r.U32.Load()) }
func (r *RDEBUGCTRL) Store(b DEBUGCTRL)           { r.U32.Store(uint32(b)) }

type RMDEBUGCTRL struct{ mmio.UM32 }

func (rm RMDEBUGCTRL) Load() DEBUGCTRL   { return DEBUGCTRL(rm.UM32.Load()) }
func (rm RMDEBUGCTRL) Store(b DEBUGCTRL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CPUNIDEN() RMDEBUGCTRL {
	return RMDEBUGCTRL{mmio.UM32{&p.DEBUGCTRL.U32, uint32(CPUNIDEN)}}
}

func (p *Periph) CPUFPBEN() RMDEBUGCTRL {
	return RMDEBUGCTRL{mmio.UM32{&p.DEBUGCTRL.U32, uint32(CPUFPBEN)}}
}

type REGOUT0 uint32

type RREGOUT0 struct{ mmio.U32 }

func (r *RREGOUT0) LoadBits(mask REGOUT0) REGOUT0 { return REGOUT0(r.U32.LoadBits(uint32(mask))) }
func (r *RREGOUT0) StoreBits(mask, b REGOUT0)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RREGOUT0) SetBits(mask REGOUT0)          { r.U32.SetBits(uint32(mask)) }
func (r *RREGOUT0) ClearBits(mask REGOUT0)        { r.U32.ClearBits(uint32(mask)) }
func (r *RREGOUT0) Load() REGOUT0                 { return REGOUT0(r.U32.Load()) }
func (r *RREGOUT0) Store(b REGOUT0)               { r.U32.Store(uint32(b)) }

type RMREGOUT0 struct{ mmio.UM32 }

func (rm RMREGOUT0) Load() REGOUT0   { return REGOUT0(rm.UM32.Load()) }
func (rm RMREGOUT0) Store(b REGOUT0) { rm.UM32.Store(uint32(b)) }

func (p *Periph) VOUT() RMREGOUT0 {
	return RMREGOUT0{mmio.UM32{&p.REGOUT0.U32, uint32(VOUT)}}
}
