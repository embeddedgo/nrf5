// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build nrf52840

// Package ficr provides access to the registers of the FICR peripheral.
//
// Instances:
//  FICR  FICR_BASE  -  -  Factory information configuration registers
// Registers:
//  0x100 32  PART            Part code
//  0x104 32  VARIANT         Build code (hardware version and production configuration)
//  0x108 32  PACKAGE         Package option
//  0x10C 32  RAM             RAM variant
//  0x110 32  FLASH           Flash variant
//  0x404 32  A0              Slope definition A0
//  0x408 32  A1              Slope definition A1
//  0x40C 32  A2              Slope definition A2
//  0x410 32  A3              Slope definition A3
//  0x414 32  A4              Slope definition A4
//  0x418 32  A5              Slope definition A5
//  0x41C 32  B0              Y-intercept B0
//  0x420 32  B1              Y-intercept B1
//  0x424 32  B2              Y-intercept B2
//  0x428 32  B3              Y-intercept B3
//  0x42C 32  B4              Y-intercept B4
//  0x430 32  B5              Y-intercept B5
//  0x434 32  T0              Segment end T0
//  0x438 32  T1              Segment end T1
//  0x43C 32  T2              Segment end T2
//  0x440 32  T3              Segment end T3
//  0x444 32  T4              Segment end T4
//  0x450 32  TAGHEADER0      Default header for NFC tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.
//  0x454 32  TAGHEADER1      Default header for NFC tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.
//  0x458 32  TAGHEADER2      Default header for NFC tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.
//  0x45C 32  TAGHEADER3      Default header for NFC tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.
//  0xC00 32  BYTES           Amount of bytes for the required entropy bits
//  0xC04 32  RCCUTOFF        Repetition counter cutoff
//  0xC08 32  APCUTOFF        Adaptive proportion cutoff
//  0xC0C 32  STARTUP         Amount of bytes for the startup tests
//  0xC10 32  ROSC1           Sample count for ring oscillator 1
//  0xC14 32  ROSC2           Sample count for ring oscillator 2
//  0xC18 32  ROSC3           Sample count for ring oscillator 3
//  0xC1C 32  ROSC4           Sample count for ring oscillator 4
//  0x010 32  CODEPAGESIZE    Code memory page size
//  0x014 32  CODESIZE        Code memory size
//  0x060 32  DEVICEID[2]     Description collection: Device identifier
//  0x080 32  ER[4]           Description collection: Encryption root, word n
//  0x090 32  IR[4]           Description collection: Identity Root, word n
//  0x0A0 32  DEVICEADDRTYPE  Device address type
//  0x0A4 32  DEVICEADDR[2]   Description collection: Device address n
//  0x350 32  PRODTEST[3]     Description collection: Production test signature n
// Import:
//  github.com/embeddedgo/nrf5/p/mmap
package ficr

const (
	PART        PART = 0xFFFFFFFF << 0 //+ Part code
	N52840      PART = 0x52840 << 0    //  nRF52840
	Unspecified PART = 0xFFFFFFFF << 0 //  Unspecified
)

const (
	PARTn = 0
)

const (
	VARIANT     VARIANT = 0xFFFFFFFF << 0 //+ Build code (hardware version and production configuration). Encoded as ASCII.
	AAAA        VARIANT = 0x41414141 << 0 //  AAAA
	AAAB        VARIANT = 0x41414142 << 0 //  AAAB
	AABA        VARIANT = 0x41414241 << 0 //  AABA
	AABB        VARIANT = 0x41414242 << 0 //  AABB
	AACA        VARIANT = 0x41414341 << 0 //  AACA
	BAAA        VARIANT = 0x42414141 << 0 //  BAAA
	CAAA        VARIANT = 0x43414141 << 0 //  CAAA
	Unspecified VARIANT = 0xFFFFFFFF << 0 //  Unspecified
)

const (
	VARIANTn = 0
)

const (
	PACKAGE     PACKAGE = 0xFFFFFFFF << 0 //+ Package option
	QI          PACKAGE = 0x2004 << 0     //  QIxx - 73-pin aQFN
	Unspecified PACKAGE = 0xFFFFFFFF << 0 //  Unspecified
)

const (
	PACKAGEn = 0
)

const (
	RAM         RAM = 0xFFFFFFFF << 0 //+ RAM variant
	K16         RAM = 0x10 << 0       //  16 kByte RAM
	K32         RAM = 0x20 << 0       //  32 kByte RAM
	K64         RAM = 0x40 << 0       //  64 kByte RAM
	K128        RAM = 0x80 << 0       //  128 kByte RAM
	K256        RAM = 0x100 << 0      //  256 kByte RAM
	Unspecified RAM = 0xFFFFFFFF << 0 //  Unspecified
)

const (
	RAMn = 0
)

const (
	FLASH       FLASH = 0xFFFFFFFF << 0 //+ Flash variant
	K128        FLASH = 0x80 << 0       //  128 kByte FLASH
	K256        FLASH = 0x100 << 0      //  256 kByte FLASH
	K512        FLASH = 0x200 << 0      //  512 kByte FLASH
	K1024       FLASH = 0x400 << 0      //  1 MByte FLASH
	K2048       FLASH = 0x800 << 0      //  2 MByte FLASH
	Unspecified FLASH = 0xFFFFFFFF << 0 //  Unspecified
)

const (
	FLASHn = 0
)

const (
	A A0 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	A A1 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	A A2 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	A A3 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	A A4 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	A A5 = 0xFFF << 0 //+ A (slope definition) register.
)

const (
	An = 0
)

const (
	B B0 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	B B1 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	B B2 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	B B3 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	B B4 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	B B5 = 0x3FFF << 0 //+ B (y-intercept)
)

const (
	Bn = 0
)

const (
	T T0 = 0xFF << 0 //+ T (segment end) register
)

const (
	Tn = 0
)

const (
	T T1 = 0xFF << 0 //+ T (segment end) register
)

const (
	Tn = 0
)

const (
	T T2 = 0xFF << 0 //+ T (segment end) register
)

const (
	Tn = 0
)

const (
	T T3 = 0xFF << 0 //+ T (segment end) register
)

const (
	Tn = 0
)

const (
	T T4 = 0xFF << 0 //+ T (segment end) register
)

const (
	Tn = 0
)

const (
	MFGID TAGHEADER0 = 0xFF << 0  //+ Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F
	UD1   TAGHEADER0 = 0xFF << 8  //+ Unique identifier byte 1
	UD2   TAGHEADER0 = 0xFF << 16 //+ Unique identifier byte 2
	UD3   TAGHEADER0 = 0xFF << 24 //+ Unique identifier byte 3
)

const (
	MFGIDn = 0
	UD1n   = 8
	UD2n   = 16
	UD3n   = 24
)

const (
	UD4 TAGHEADER1 = 0xFF << 0  //+ Unique identifier byte 4
	UD5 TAGHEADER1 = 0xFF << 8  //+ Unique identifier byte 5
	UD6 TAGHEADER1 = 0xFF << 16 //+ Unique identifier byte 6
	UD7 TAGHEADER1 = 0xFF << 24 //+ Unique identifier byte 7
)

const (
	UD4n = 0
	UD5n = 8
	UD6n = 16
	UD7n = 24
)

const (
	UD8  TAGHEADER2 = 0xFF << 0  //+ Unique identifier byte 8
	UD9  TAGHEADER2 = 0xFF << 8  //+ Unique identifier byte 9
	UD10 TAGHEADER2 = 0xFF << 16 //+ Unique identifier byte 10
	UD11 TAGHEADER2 = 0xFF << 24 //+ Unique identifier byte 11
)

const (
	UD8n  = 0
	UD9n  = 8
	UD10n = 16
	UD11n = 24
)

const (
	UD12 TAGHEADER3 = 0xFF << 0  //+ Unique identifier byte 12
	UD13 TAGHEADER3 = 0xFF << 8  //+ Unique identifier byte 13
	UD14 TAGHEADER3 = 0xFF << 16 //+ Unique identifier byte 14
	UD15 TAGHEADER3 = 0xFF << 24 //+ Unique identifier byte 15
)

const (
	UD12n = 0
	UD13n = 8
	UD14n = 16
	UD15n = 24
)

const (
	BYTES BYTES = 0xFFFFFFFF << 0 //+ Amount of bytes for the required entropy bits
)

const (
	BYTESn = 0
)

const (
	RCCUTOFF RCCUTOFF = 0xFFFFFFFF << 0 //+ Repetition counter cutoff
)

const (
	RCCUTOFFn = 0
)

const (
	APCUTOFF APCUTOFF = 0xFFFFFFFF << 0 //+ Adaptive proportion cutoff
)

const (
	APCUTOFFn = 0
)

const (
	STARTUP STARTUP = 0xFFFFFFFF << 0 //+ Amount of bytes for the startup tests
)

const (
	STARTUPn = 0
)

const (
	ROSC1 ROSC1 = 0xFFFFFFFF << 0 //+ Sample count for ring oscillator 1
)

const (
	ROSC1n = 0
)

const (
	ROSC2 ROSC2 = 0xFFFFFFFF << 0 //+ Sample count for ring oscillator 2
)

const (
	ROSC2n = 0
)

const (
	ROSC3 ROSC3 = 0xFFFFFFFF << 0 //+ Sample count for ring oscillator 3
)

const (
	ROSC3n = 0
)

const (
	ROSC4 ROSC4 = 0xFFFFFFFF << 0 //+ Sample count for ring oscillator 4
)

const (
	ROSC4n = 0
)

const (
	CODEPAGESIZE CODEPAGESIZE = 0xFFFFFFFF << 0 //+ Code memory page size
)

const (
	CODEPAGESIZEn = 0
)

const (
	CODESIZE CODESIZE = 0xFFFFFFFF << 0 //+ Code memory size in number of pages
)

const (
	CODESIZEn = 0
)

const (
	DEVICEID DEVICEID = 0xFFFFFFFF << 0 //+ 64 bit unique device identifier
)

const (
	DEVICEIDn = 0
)

const (
	ER ER = 0xFFFFFFFF << 0 //+ Encryption root, word n
)

const (
	ERn = 0
)

const (
	IR IR = 0xFFFFFFFF << 0 //+ Identity Root, word n
)

const (
	IRn = 0
)

const (
	DEVICEADDRTYPE DEVICEADDRTYPE = 0x01 << 0 //+ Device address type
	Public         DEVICEADDRTYPE = 0x00 << 0 //  Public address
	Random         DEVICEADDRTYPE = 0x01 << 0 //  Random address
)

const (
	DEVICEADDRTYPEn = 0
)

const (
	DEVICEADDR DEVICEADDR = 0xFFFFFFFF << 0 //+ 48 bit device address
)

const (
	DEVICEADDRn = 0
)

const (
	PRODTEST PRODTEST = 0xFFFFFFFF << 0 //+ Production test signature n
	Done     PRODTEST = 0xBB42319F << 0 //  Production tests done
	NotDone  PRODTEST = 0xFFFFFFFF << 0 //  Production tests not done
)

const (
	PRODTESTn = 0
)
