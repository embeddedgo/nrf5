// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package ficr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_                [4]uint32
	CODEPAGESIZE     RCODEPAGESIZE
	CODESIZE         RCODESIZE
	_                [18]uint32
	DEVICEID         [2]RDEVICEID
	_                [6]uint32
	ER               [4]RER
	IR               [4]RIR
	DEVICEADDRTYPE   RDEVICEADDRTYPE
	DEVICEADDR       [2]RDEVICEADDR
	_                [21]uint32
	INFO_PART        RINFO_PART
	INFO_VARIANT     RINFO_VARIANT
	INFO_PACKAGE     RINFO_PACKAGE
	INFO_RAM         RINFO_RAM
	INFO_FLASH       RINFO_FLASH
	_                [143]uint32
	PRODTEST         [3]RPRODTEST
	_                [42]uint32
	TEMP_A           [6]RTEMP_A
	TEMP_B           [6]RTEMP_B
	TEMP_T           [5]RTEMP_T
	_                [2]uint32
	NFC_TAGHEADER0   RNFC_TAGHEADER0
	NFC_TAGHEADER1   RNFC_TAGHEADER1
	NFC_TAGHEADER2   RNFC_TAGHEADER2
	NFC_TAGHEADER3   RNFC_TAGHEADER3
	_                [488]uint32
	TRNG90B_BYTES    RTRNG90B_BYTES
	TRNG90B_RCCUTOFF RTRNG90B_RCCUTOFF
	TRNG90B_APCUTOFF RTRNG90B_APCUTOFF
	TRNG90B_STARTUP  RTRNG90B_STARTUP
	TRNG90B_ROSC1    RTRNG90B_ROSC1
	TRNG90B_ROSC2    RTRNG90B_ROSC2
	TRNG90B_ROSC3    RTRNG90B_ROSC3
	TRNG90B_ROSC4    RTRNG90B_ROSC4
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func FICR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.FICR_BASE))) }

type CODEPAGESIZE uint32

type RCODEPAGESIZE struct{ mmio.U32 }

func (r *RCODEPAGESIZE) LoadBits(mask CODEPAGESIZE) CODEPAGESIZE {
	return CODEPAGESIZE(r.U32.LoadBits(uint32(mask)))
}
func (r *RCODEPAGESIZE) StoreBits(mask, b CODEPAGESIZE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCODEPAGESIZE) SetBits(mask CODEPAGESIZE)      { r.U32.SetBits(uint32(mask)) }
func (r *RCODEPAGESIZE) ClearBits(mask CODEPAGESIZE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCODEPAGESIZE) Load() CODEPAGESIZE             { return CODEPAGESIZE(r.U32.Load()) }
func (r *RCODEPAGESIZE) Store(b CODEPAGESIZE)           { r.U32.Store(uint32(b)) }

type RMCODEPAGESIZE struct{ mmio.UM32 }

func (rm RMCODEPAGESIZE) Load() CODEPAGESIZE   { return CODEPAGESIZE(rm.UM32.Load()) }
func (rm RMCODEPAGESIZE) Store(b CODEPAGESIZE) { rm.UM32.Store(uint32(b)) }

type CODESIZE uint32

type RCODESIZE struct{ mmio.U32 }

func (r *RCODESIZE) LoadBits(mask CODESIZE) CODESIZE { return CODESIZE(r.U32.LoadBits(uint32(mask))) }
func (r *RCODESIZE) StoreBits(mask, b CODESIZE)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCODESIZE) SetBits(mask CODESIZE)           { r.U32.SetBits(uint32(mask)) }
func (r *RCODESIZE) ClearBits(mask CODESIZE)         { r.U32.ClearBits(uint32(mask)) }
func (r *RCODESIZE) Load() CODESIZE                  { return CODESIZE(r.U32.Load()) }
func (r *RCODESIZE) Store(b CODESIZE)                { r.U32.Store(uint32(b)) }

type RMCODESIZE struct{ mmio.UM32 }

func (rm RMCODESIZE) Load() CODESIZE   { return CODESIZE(rm.UM32.Load()) }
func (rm RMCODESIZE) Store(b CODESIZE) { rm.UM32.Store(uint32(b)) }

type DEVICEID uint32

type RDEVICEID struct{ mmio.U32 }

func (r *RDEVICEID) LoadBits(mask DEVICEID) DEVICEID { return DEVICEID(r.U32.LoadBits(uint32(mask))) }
func (r *RDEVICEID) StoreBits(mask, b DEVICEID)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDEVICEID) SetBits(mask DEVICEID)           { r.U32.SetBits(uint32(mask)) }
func (r *RDEVICEID) ClearBits(mask DEVICEID)         { r.U32.ClearBits(uint32(mask)) }
func (r *RDEVICEID) Load() DEVICEID                  { return DEVICEID(r.U32.Load()) }
func (r *RDEVICEID) Store(b DEVICEID)                { r.U32.Store(uint32(b)) }

type RMDEVICEID struct{ mmio.UM32 }

func (rm RMDEVICEID) Load() DEVICEID   { return DEVICEID(rm.UM32.Load()) }
func (rm RMDEVICEID) Store(b DEVICEID) { rm.UM32.Store(uint32(b)) }

type ER uint32

type RER struct{ mmio.U32 }

func (r *RER) LoadBits(mask ER) ER  { return ER(r.U32.LoadBits(uint32(mask))) }
func (r *RER) StoreBits(mask, b ER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RER) SetBits(mask ER)      { r.U32.SetBits(uint32(mask)) }
func (r *RER) ClearBits(mask ER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RER) Load() ER             { return ER(r.U32.Load()) }
func (r *RER) Store(b ER)           { r.U32.Store(uint32(b)) }

type RMER struct{ mmio.UM32 }

func (rm RMER) Load() ER   { return ER(rm.UM32.Load()) }
func (rm RMER) Store(b ER) { rm.UM32.Store(uint32(b)) }

type IR uint32

type RIR struct{ mmio.U32 }

func (r *RIR) LoadBits(mask IR) IR  { return IR(r.U32.LoadBits(uint32(mask))) }
func (r *RIR) StoreBits(mask, b IR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIR) SetBits(mask IR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIR) ClearBits(mask IR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIR) Load() IR             { return IR(r.U32.Load()) }
func (r *RIR) Store(b IR)           { r.U32.Store(uint32(b)) }

type RMIR struct{ mmio.UM32 }

func (rm RMIR) Load() IR   { return IR(rm.UM32.Load()) }
func (rm RMIR) Store(b IR) { rm.UM32.Store(uint32(b)) }

type DEVICEADDRTYPE uint32

type RDEVICEADDRTYPE struct{ mmio.U32 }

func (r *RDEVICEADDRTYPE) LoadBits(mask DEVICEADDRTYPE) DEVICEADDRTYPE {
	return DEVICEADDRTYPE(r.U32.LoadBits(uint32(mask)))
}
func (r *RDEVICEADDRTYPE) StoreBits(mask, b DEVICEADDRTYPE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDEVICEADDRTYPE) SetBits(mask DEVICEADDRTYPE)      { r.U32.SetBits(uint32(mask)) }
func (r *RDEVICEADDRTYPE) ClearBits(mask DEVICEADDRTYPE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDEVICEADDRTYPE) Load() DEVICEADDRTYPE             { return DEVICEADDRTYPE(r.U32.Load()) }
func (r *RDEVICEADDRTYPE) Store(b DEVICEADDRTYPE)           { r.U32.Store(uint32(b)) }

type RMDEVICEADDRTYPE struct{ mmio.UM32 }

func (rm RMDEVICEADDRTYPE) Load() DEVICEADDRTYPE   { return DEVICEADDRTYPE(rm.UM32.Load()) }
func (rm RMDEVICEADDRTYPE) Store(b DEVICEADDRTYPE) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DEVADDRTYPE() RMDEVICEADDRTYPE {
	return RMDEVICEADDRTYPE{mmio.UM32{&p.DEVICEADDRTYPE.U32, uint32(DEVADDRTYPE)}}
}

type DEVICEADDR uint32

type RDEVICEADDR struct{ mmio.U32 }

func (r *RDEVICEADDR) LoadBits(mask DEVICEADDR) DEVICEADDR {
	return DEVICEADDR(r.U32.LoadBits(uint32(mask)))
}
func (r *RDEVICEADDR) StoreBits(mask, b DEVICEADDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDEVICEADDR) SetBits(mask DEVICEADDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDEVICEADDR) ClearBits(mask DEVICEADDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDEVICEADDR) Load() DEVICEADDR             { return DEVICEADDR(r.U32.Load()) }
func (r *RDEVICEADDR) Store(b DEVICEADDR)           { r.U32.Store(uint32(b)) }

type RMDEVICEADDR struct{ mmio.UM32 }

func (rm RMDEVICEADDR) Load() DEVICEADDR   { return DEVICEADDR(rm.UM32.Load()) }
func (rm RMDEVICEADDR) Store(b DEVICEADDR) { rm.UM32.Store(uint32(b)) }

type INFO_PART uint32

type RINFO_PART struct{ mmio.U32 }

func (r *RINFO_PART) LoadBits(mask INFO_PART) INFO_PART {
	return INFO_PART(r.U32.LoadBits(uint32(mask)))
}
func (r *RINFO_PART) StoreBits(mask, b INFO_PART) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINFO_PART) SetBits(mask INFO_PART)      { r.U32.SetBits(uint32(mask)) }
func (r *RINFO_PART) ClearBits(mask INFO_PART)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINFO_PART) Load() INFO_PART             { return INFO_PART(r.U32.Load()) }
func (r *RINFO_PART) Store(b INFO_PART)           { r.U32.Store(uint32(b)) }

type RMINFO_PART struct{ mmio.UM32 }

func (rm RMINFO_PART) Load() INFO_PART   { return INFO_PART(rm.UM32.Load()) }
func (rm RMINFO_PART) Store(b INFO_PART) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PART() RMINFO_PART {
	return RMINFO_PART{mmio.UM32{&p.INFO_PART.U32, uint32(PART)}}
}

type INFO_VARIANT uint32

type RINFO_VARIANT struct{ mmio.U32 }

func (r *RINFO_VARIANT) LoadBits(mask INFO_VARIANT) INFO_VARIANT {
	return INFO_VARIANT(r.U32.LoadBits(uint32(mask)))
}
func (r *RINFO_VARIANT) StoreBits(mask, b INFO_VARIANT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINFO_VARIANT) SetBits(mask INFO_VARIANT)      { r.U32.SetBits(uint32(mask)) }
func (r *RINFO_VARIANT) ClearBits(mask INFO_VARIANT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINFO_VARIANT) Load() INFO_VARIANT             { return INFO_VARIANT(r.U32.Load()) }
func (r *RINFO_VARIANT) Store(b INFO_VARIANT)           { r.U32.Store(uint32(b)) }

type RMINFO_VARIANT struct{ mmio.UM32 }

func (rm RMINFO_VARIANT) Load() INFO_VARIANT   { return INFO_VARIANT(rm.UM32.Load()) }
func (rm RMINFO_VARIANT) Store(b INFO_VARIANT) { rm.UM32.Store(uint32(b)) }

func (p *Periph) VARIANT() RMINFO_VARIANT {
	return RMINFO_VARIANT{mmio.UM32{&p.INFO_VARIANT.U32, uint32(VARIANT)}}
}

type INFO_PACKAGE uint32

type RINFO_PACKAGE struct{ mmio.U32 }

func (r *RINFO_PACKAGE) LoadBits(mask INFO_PACKAGE) INFO_PACKAGE {
	return INFO_PACKAGE(r.U32.LoadBits(uint32(mask)))
}
func (r *RINFO_PACKAGE) StoreBits(mask, b INFO_PACKAGE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINFO_PACKAGE) SetBits(mask INFO_PACKAGE)      { r.U32.SetBits(uint32(mask)) }
func (r *RINFO_PACKAGE) ClearBits(mask INFO_PACKAGE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINFO_PACKAGE) Load() INFO_PACKAGE             { return INFO_PACKAGE(r.U32.Load()) }
func (r *RINFO_PACKAGE) Store(b INFO_PACKAGE)           { r.U32.Store(uint32(b)) }

type RMINFO_PACKAGE struct{ mmio.UM32 }

func (rm RMINFO_PACKAGE) Load() INFO_PACKAGE   { return INFO_PACKAGE(rm.UM32.Load()) }
func (rm RMINFO_PACKAGE) Store(b INFO_PACKAGE) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PACKAGE() RMINFO_PACKAGE {
	return RMINFO_PACKAGE{mmio.UM32{&p.INFO_PACKAGE.U32, uint32(PACKAGE)}}
}

type INFO_RAM uint32

type RINFO_RAM struct{ mmio.U32 }

func (r *RINFO_RAM) LoadBits(mask INFO_RAM) INFO_RAM { return INFO_RAM(r.U32.LoadBits(uint32(mask))) }
func (r *RINFO_RAM) StoreBits(mask, b INFO_RAM)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINFO_RAM) SetBits(mask INFO_RAM)           { r.U32.SetBits(uint32(mask)) }
func (r *RINFO_RAM) ClearBits(mask INFO_RAM)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINFO_RAM) Load() INFO_RAM                  { return INFO_RAM(r.U32.Load()) }
func (r *RINFO_RAM) Store(b INFO_RAM)                { r.U32.Store(uint32(b)) }

type RMINFO_RAM struct{ mmio.UM32 }

func (rm RMINFO_RAM) Load() INFO_RAM   { return INFO_RAM(rm.UM32.Load()) }
func (rm RMINFO_RAM) Store(b INFO_RAM) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RAM() RMINFO_RAM {
	return RMINFO_RAM{mmio.UM32{&p.INFO_RAM.U32, uint32(RAM)}}
}

type INFO_FLASH uint32

type RINFO_FLASH struct{ mmio.U32 }

func (r *RINFO_FLASH) LoadBits(mask INFO_FLASH) INFO_FLASH {
	return INFO_FLASH(r.U32.LoadBits(uint32(mask)))
}
func (r *RINFO_FLASH) StoreBits(mask, b INFO_FLASH) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINFO_FLASH) SetBits(mask INFO_FLASH)      { r.U32.SetBits(uint32(mask)) }
func (r *RINFO_FLASH) ClearBits(mask INFO_FLASH)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINFO_FLASH) Load() INFO_FLASH             { return INFO_FLASH(r.U32.Load()) }
func (r *RINFO_FLASH) Store(b INFO_FLASH)           { r.U32.Store(uint32(b)) }

type RMINFO_FLASH struct{ mmio.UM32 }

func (rm RMINFO_FLASH) Load() INFO_FLASH   { return INFO_FLASH(rm.UM32.Load()) }
func (rm RMINFO_FLASH) Store(b INFO_FLASH) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FLASH() RMINFO_FLASH {
	return RMINFO_FLASH{mmio.UM32{&p.INFO_FLASH.U32, uint32(FLASH)}}
}

type PRODTEST uint32

type RPRODTEST struct{ mmio.U32 }

func (r *RPRODTEST) LoadBits(mask PRODTEST) PRODTEST { return PRODTEST(r.U32.LoadBits(uint32(mask))) }
func (r *RPRODTEST) StoreBits(mask, b PRODTEST)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPRODTEST) SetBits(mask PRODTEST)           { r.U32.SetBits(uint32(mask)) }
func (r *RPRODTEST) ClearBits(mask PRODTEST)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPRODTEST) Load() PRODTEST                  { return PRODTEST(r.U32.Load()) }
func (r *RPRODTEST) Store(b PRODTEST)                { r.U32.Store(uint32(b)) }

type RMPRODTEST struct{ mmio.UM32 }

func (rm RMPRODTEST) Load() PRODTEST   { return PRODTEST(rm.UM32.Load()) }
func (rm RMPRODTEST) Store(b PRODTEST) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PTEST(n int) RMPRODTEST {
	return RMPRODTEST{mmio.UM32{&p.PRODTEST[n].U32, uint32(PTEST)}}
}

type TEMP_A uint32

type RTEMP_A struct{ mmio.U32 }

func (r *RTEMP_A) LoadBits(mask TEMP_A) TEMP_A { return TEMP_A(r.U32.LoadBits(uint32(mask))) }
func (r *RTEMP_A) StoreBits(mask, b TEMP_A)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTEMP_A) SetBits(mask TEMP_A)         { r.U32.SetBits(uint32(mask)) }
func (r *RTEMP_A) ClearBits(mask TEMP_A)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTEMP_A) Load() TEMP_A                { return TEMP_A(r.U32.Load()) }
func (r *RTEMP_A) Store(b TEMP_A)              { r.U32.Store(uint32(b)) }

type RMTEMP_A struct{ mmio.UM32 }

func (rm RMTEMP_A) Load() TEMP_A   { return TEMP_A(rm.UM32.Load()) }
func (rm RMTEMP_A) Store(b TEMP_A) { rm.UM32.Store(uint32(b)) }

func (p *Periph) A(n int) RMTEMP_A {
	return RMTEMP_A{mmio.UM32{&p.TEMP_A[n].U32, uint32(A)}}
}

type TEMP_B uint32

type RTEMP_B struct{ mmio.U32 }

func (r *RTEMP_B) LoadBits(mask TEMP_B) TEMP_B { return TEMP_B(r.U32.LoadBits(uint32(mask))) }
func (r *RTEMP_B) StoreBits(mask, b TEMP_B)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTEMP_B) SetBits(mask TEMP_B)         { r.U32.SetBits(uint32(mask)) }
func (r *RTEMP_B) ClearBits(mask TEMP_B)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTEMP_B) Load() TEMP_B                { return TEMP_B(r.U32.Load()) }
func (r *RTEMP_B) Store(b TEMP_B)              { r.U32.Store(uint32(b)) }

type RMTEMP_B struct{ mmio.UM32 }

func (rm RMTEMP_B) Load() TEMP_B   { return TEMP_B(rm.UM32.Load()) }
func (rm RMTEMP_B) Store(b TEMP_B) { rm.UM32.Store(uint32(b)) }

func (p *Periph) B(n int) RMTEMP_B {
	return RMTEMP_B{mmio.UM32{&p.TEMP_B[n].U32, uint32(B)}}
}

type TEMP_T uint32

type RTEMP_T struct{ mmio.U32 }

func (r *RTEMP_T) LoadBits(mask TEMP_T) TEMP_T { return TEMP_T(r.U32.LoadBits(uint32(mask))) }
func (r *RTEMP_T) StoreBits(mask, b TEMP_T)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTEMP_T) SetBits(mask TEMP_T)         { r.U32.SetBits(uint32(mask)) }
func (r *RTEMP_T) ClearBits(mask TEMP_T)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTEMP_T) Load() TEMP_T                { return TEMP_T(r.U32.Load()) }
func (r *RTEMP_T) Store(b TEMP_T)              { r.U32.Store(uint32(b)) }

type RMTEMP_T struct{ mmio.UM32 }

func (rm RMTEMP_T) Load() TEMP_T   { return TEMP_T(rm.UM32.Load()) }
func (rm RMTEMP_T) Store(b TEMP_T) { rm.UM32.Store(uint32(b)) }

func (p *Periph) T(n int) RMTEMP_T {
	return RMTEMP_T{mmio.UM32{&p.TEMP_T[n].U32, uint32(T)}}
}

type NFC_TAGHEADER0 uint32

type RNFC_TAGHEADER0 struct{ mmio.U32 }

func (r *RNFC_TAGHEADER0) LoadBits(mask NFC_TAGHEADER0) NFC_TAGHEADER0 {
	return NFC_TAGHEADER0(r.U32.LoadBits(uint32(mask)))
}
func (r *RNFC_TAGHEADER0) StoreBits(mask, b NFC_TAGHEADER0) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNFC_TAGHEADER0) SetBits(mask NFC_TAGHEADER0)      { r.U32.SetBits(uint32(mask)) }
func (r *RNFC_TAGHEADER0) ClearBits(mask NFC_TAGHEADER0)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNFC_TAGHEADER0) Load() NFC_TAGHEADER0             { return NFC_TAGHEADER0(r.U32.Load()) }
func (r *RNFC_TAGHEADER0) Store(b NFC_TAGHEADER0)           { r.U32.Store(uint32(b)) }

type RMNFC_TAGHEADER0 struct{ mmio.UM32 }

func (rm RMNFC_TAGHEADER0) Load() NFC_TAGHEADER0   { return NFC_TAGHEADER0(rm.UM32.Load()) }
func (rm RMNFC_TAGHEADER0) Store(b NFC_TAGHEADER0) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MFGID() RMNFC_TAGHEADER0 {
	return RMNFC_TAGHEADER0{mmio.UM32{&p.NFC_TAGHEADER0.U32, uint32(MFGID)}}
}

func (p *Periph) UD1() RMNFC_TAGHEADER0 {
	return RMNFC_TAGHEADER0{mmio.UM32{&p.NFC_TAGHEADER0.U32, uint32(UD1)}}
}

func (p *Periph) UD2() RMNFC_TAGHEADER0 {
	return RMNFC_TAGHEADER0{mmio.UM32{&p.NFC_TAGHEADER0.U32, uint32(UD2)}}
}

func (p *Periph) UD3() RMNFC_TAGHEADER0 {
	return RMNFC_TAGHEADER0{mmio.UM32{&p.NFC_TAGHEADER0.U32, uint32(UD3)}}
}

type NFC_TAGHEADER1 uint32

type RNFC_TAGHEADER1 struct{ mmio.U32 }

func (r *RNFC_TAGHEADER1) LoadBits(mask NFC_TAGHEADER1) NFC_TAGHEADER1 {
	return NFC_TAGHEADER1(r.U32.LoadBits(uint32(mask)))
}
func (r *RNFC_TAGHEADER1) StoreBits(mask, b NFC_TAGHEADER1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNFC_TAGHEADER1) SetBits(mask NFC_TAGHEADER1)      { r.U32.SetBits(uint32(mask)) }
func (r *RNFC_TAGHEADER1) ClearBits(mask NFC_TAGHEADER1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNFC_TAGHEADER1) Load() NFC_TAGHEADER1             { return NFC_TAGHEADER1(r.U32.Load()) }
func (r *RNFC_TAGHEADER1) Store(b NFC_TAGHEADER1)           { r.U32.Store(uint32(b)) }

type RMNFC_TAGHEADER1 struct{ mmio.UM32 }

func (rm RMNFC_TAGHEADER1) Load() NFC_TAGHEADER1   { return NFC_TAGHEADER1(rm.UM32.Load()) }
func (rm RMNFC_TAGHEADER1) Store(b NFC_TAGHEADER1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) UD4() RMNFC_TAGHEADER1 {
	return RMNFC_TAGHEADER1{mmio.UM32{&p.NFC_TAGHEADER1.U32, uint32(UD4)}}
}

func (p *Periph) UD5() RMNFC_TAGHEADER1 {
	return RMNFC_TAGHEADER1{mmio.UM32{&p.NFC_TAGHEADER1.U32, uint32(UD5)}}
}

func (p *Periph) UD6() RMNFC_TAGHEADER1 {
	return RMNFC_TAGHEADER1{mmio.UM32{&p.NFC_TAGHEADER1.U32, uint32(UD6)}}
}

func (p *Periph) UD7() RMNFC_TAGHEADER1 {
	return RMNFC_TAGHEADER1{mmio.UM32{&p.NFC_TAGHEADER1.U32, uint32(UD7)}}
}

type NFC_TAGHEADER2 uint32

type RNFC_TAGHEADER2 struct{ mmio.U32 }

func (r *RNFC_TAGHEADER2) LoadBits(mask NFC_TAGHEADER2) NFC_TAGHEADER2 {
	return NFC_TAGHEADER2(r.U32.LoadBits(uint32(mask)))
}
func (r *RNFC_TAGHEADER2) StoreBits(mask, b NFC_TAGHEADER2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNFC_TAGHEADER2) SetBits(mask NFC_TAGHEADER2)      { r.U32.SetBits(uint32(mask)) }
func (r *RNFC_TAGHEADER2) ClearBits(mask NFC_TAGHEADER2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNFC_TAGHEADER2) Load() NFC_TAGHEADER2             { return NFC_TAGHEADER2(r.U32.Load()) }
func (r *RNFC_TAGHEADER2) Store(b NFC_TAGHEADER2)           { r.U32.Store(uint32(b)) }

type RMNFC_TAGHEADER2 struct{ mmio.UM32 }

func (rm RMNFC_TAGHEADER2) Load() NFC_TAGHEADER2   { return NFC_TAGHEADER2(rm.UM32.Load()) }
func (rm RMNFC_TAGHEADER2) Store(b NFC_TAGHEADER2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) UD8() RMNFC_TAGHEADER2 {
	return RMNFC_TAGHEADER2{mmio.UM32{&p.NFC_TAGHEADER2.U32, uint32(UD8)}}
}

func (p *Periph) UD9() RMNFC_TAGHEADER2 {
	return RMNFC_TAGHEADER2{mmio.UM32{&p.NFC_TAGHEADER2.U32, uint32(UD9)}}
}

func (p *Periph) UD10() RMNFC_TAGHEADER2 {
	return RMNFC_TAGHEADER2{mmio.UM32{&p.NFC_TAGHEADER2.U32, uint32(UD10)}}
}

func (p *Periph) UD11() RMNFC_TAGHEADER2 {
	return RMNFC_TAGHEADER2{mmio.UM32{&p.NFC_TAGHEADER2.U32, uint32(UD11)}}
}

type NFC_TAGHEADER3 uint32

type RNFC_TAGHEADER3 struct{ mmio.U32 }

func (r *RNFC_TAGHEADER3) LoadBits(mask NFC_TAGHEADER3) NFC_TAGHEADER3 {
	return NFC_TAGHEADER3(r.U32.LoadBits(uint32(mask)))
}
func (r *RNFC_TAGHEADER3) StoreBits(mask, b NFC_TAGHEADER3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNFC_TAGHEADER3) SetBits(mask NFC_TAGHEADER3)      { r.U32.SetBits(uint32(mask)) }
func (r *RNFC_TAGHEADER3) ClearBits(mask NFC_TAGHEADER3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNFC_TAGHEADER3) Load() NFC_TAGHEADER3             { return NFC_TAGHEADER3(r.U32.Load()) }
func (r *RNFC_TAGHEADER3) Store(b NFC_TAGHEADER3)           { r.U32.Store(uint32(b)) }

type RMNFC_TAGHEADER3 struct{ mmio.UM32 }

func (rm RMNFC_TAGHEADER3) Load() NFC_TAGHEADER3   { return NFC_TAGHEADER3(rm.UM32.Load()) }
func (rm RMNFC_TAGHEADER3) Store(b NFC_TAGHEADER3) { rm.UM32.Store(uint32(b)) }

func (p *Periph) UD12() RMNFC_TAGHEADER3 {
	return RMNFC_TAGHEADER3{mmio.UM32{&p.NFC_TAGHEADER3.U32, uint32(UD12)}}
}

func (p *Periph) UD13() RMNFC_TAGHEADER3 {
	return RMNFC_TAGHEADER3{mmio.UM32{&p.NFC_TAGHEADER3.U32, uint32(UD13)}}
}

func (p *Periph) UD14() RMNFC_TAGHEADER3 {
	return RMNFC_TAGHEADER3{mmio.UM32{&p.NFC_TAGHEADER3.U32, uint32(UD14)}}
}

func (p *Periph) UD15() RMNFC_TAGHEADER3 {
	return RMNFC_TAGHEADER3{mmio.UM32{&p.NFC_TAGHEADER3.U32, uint32(UD15)}}
}

type TRNG90B_BYTES uint32

type RTRNG90B_BYTES struct{ mmio.U32 }

func (r *RTRNG90B_BYTES) LoadBits(mask TRNG90B_BYTES) TRNG90B_BYTES {
	return TRNG90B_BYTES(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_BYTES) StoreBits(mask, b TRNG90B_BYTES) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTRNG90B_BYTES) SetBits(mask TRNG90B_BYTES)      { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_BYTES) ClearBits(mask TRNG90B_BYTES)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_BYTES) Load() TRNG90B_BYTES             { return TRNG90B_BYTES(r.U32.Load()) }
func (r *RTRNG90B_BYTES) Store(b TRNG90B_BYTES)           { r.U32.Store(uint32(b)) }

type RMTRNG90B_BYTES struct{ mmio.UM32 }

func (rm RMTRNG90B_BYTES) Load() TRNG90B_BYTES   { return TRNG90B_BYTES(rm.UM32.Load()) }
func (rm RMTRNG90B_BYTES) Store(b TRNG90B_BYTES) { rm.UM32.Store(uint32(b)) }

type TRNG90B_RCCUTOFF uint32

type RTRNG90B_RCCUTOFF struct{ mmio.U32 }

func (r *RTRNG90B_RCCUTOFF) LoadBits(mask TRNG90B_RCCUTOFF) TRNG90B_RCCUTOFF {
	return TRNG90B_RCCUTOFF(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_RCCUTOFF) StoreBits(mask, b TRNG90B_RCCUTOFF) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RTRNG90B_RCCUTOFF) SetBits(mask TRNG90B_RCCUTOFF)   { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_RCCUTOFF) ClearBits(mask TRNG90B_RCCUTOFF) { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_RCCUTOFF) Load() TRNG90B_RCCUTOFF          { return TRNG90B_RCCUTOFF(r.U32.Load()) }
func (r *RTRNG90B_RCCUTOFF) Store(b TRNG90B_RCCUTOFF)        { r.U32.Store(uint32(b)) }

type RMTRNG90B_RCCUTOFF struct{ mmio.UM32 }

func (rm RMTRNG90B_RCCUTOFF) Load() TRNG90B_RCCUTOFF   { return TRNG90B_RCCUTOFF(rm.UM32.Load()) }
func (rm RMTRNG90B_RCCUTOFF) Store(b TRNG90B_RCCUTOFF) { rm.UM32.Store(uint32(b)) }

type TRNG90B_APCUTOFF uint32

type RTRNG90B_APCUTOFF struct{ mmio.U32 }

func (r *RTRNG90B_APCUTOFF) LoadBits(mask TRNG90B_APCUTOFF) TRNG90B_APCUTOFF {
	return TRNG90B_APCUTOFF(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_APCUTOFF) StoreBits(mask, b TRNG90B_APCUTOFF) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RTRNG90B_APCUTOFF) SetBits(mask TRNG90B_APCUTOFF)   { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_APCUTOFF) ClearBits(mask TRNG90B_APCUTOFF) { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_APCUTOFF) Load() TRNG90B_APCUTOFF          { return TRNG90B_APCUTOFF(r.U32.Load()) }
func (r *RTRNG90B_APCUTOFF) Store(b TRNG90B_APCUTOFF)        { r.U32.Store(uint32(b)) }

type RMTRNG90B_APCUTOFF struct{ mmio.UM32 }

func (rm RMTRNG90B_APCUTOFF) Load() TRNG90B_APCUTOFF   { return TRNG90B_APCUTOFF(rm.UM32.Load()) }
func (rm RMTRNG90B_APCUTOFF) Store(b TRNG90B_APCUTOFF) { rm.UM32.Store(uint32(b)) }

type TRNG90B_STARTUP uint32

type RTRNG90B_STARTUP struct{ mmio.U32 }

func (r *RTRNG90B_STARTUP) LoadBits(mask TRNG90B_STARTUP) TRNG90B_STARTUP {
	return TRNG90B_STARTUP(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_STARTUP) StoreBits(mask, b TRNG90B_STARTUP) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RTRNG90B_STARTUP) SetBits(mask TRNG90B_STARTUP)   { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_STARTUP) ClearBits(mask TRNG90B_STARTUP) { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_STARTUP) Load() TRNG90B_STARTUP          { return TRNG90B_STARTUP(r.U32.Load()) }
func (r *RTRNG90B_STARTUP) Store(b TRNG90B_STARTUP)        { r.U32.Store(uint32(b)) }

type RMTRNG90B_STARTUP struct{ mmio.UM32 }

func (rm RMTRNG90B_STARTUP) Load() TRNG90B_STARTUP   { return TRNG90B_STARTUP(rm.UM32.Load()) }
func (rm RMTRNG90B_STARTUP) Store(b TRNG90B_STARTUP) { rm.UM32.Store(uint32(b)) }

type TRNG90B_ROSC1 uint32

type RTRNG90B_ROSC1 struct{ mmio.U32 }

func (r *RTRNG90B_ROSC1) LoadBits(mask TRNG90B_ROSC1) TRNG90B_ROSC1 {
	return TRNG90B_ROSC1(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_ROSC1) StoreBits(mask, b TRNG90B_ROSC1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTRNG90B_ROSC1) SetBits(mask TRNG90B_ROSC1)      { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_ROSC1) ClearBits(mask TRNG90B_ROSC1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_ROSC1) Load() TRNG90B_ROSC1             { return TRNG90B_ROSC1(r.U32.Load()) }
func (r *RTRNG90B_ROSC1) Store(b TRNG90B_ROSC1)           { r.U32.Store(uint32(b)) }

type RMTRNG90B_ROSC1 struct{ mmio.UM32 }

func (rm RMTRNG90B_ROSC1) Load() TRNG90B_ROSC1   { return TRNG90B_ROSC1(rm.UM32.Load()) }
func (rm RMTRNG90B_ROSC1) Store(b TRNG90B_ROSC1) { rm.UM32.Store(uint32(b)) }

type TRNG90B_ROSC2 uint32

type RTRNG90B_ROSC2 struct{ mmio.U32 }

func (r *RTRNG90B_ROSC2) LoadBits(mask TRNG90B_ROSC2) TRNG90B_ROSC2 {
	return TRNG90B_ROSC2(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_ROSC2) StoreBits(mask, b TRNG90B_ROSC2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTRNG90B_ROSC2) SetBits(mask TRNG90B_ROSC2)      { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_ROSC2) ClearBits(mask TRNG90B_ROSC2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_ROSC2) Load() TRNG90B_ROSC2             { return TRNG90B_ROSC2(r.U32.Load()) }
func (r *RTRNG90B_ROSC2) Store(b TRNG90B_ROSC2)           { r.U32.Store(uint32(b)) }

type RMTRNG90B_ROSC2 struct{ mmio.UM32 }

func (rm RMTRNG90B_ROSC2) Load() TRNG90B_ROSC2   { return TRNG90B_ROSC2(rm.UM32.Load()) }
func (rm RMTRNG90B_ROSC2) Store(b TRNG90B_ROSC2) { rm.UM32.Store(uint32(b)) }

type TRNG90B_ROSC3 uint32

type RTRNG90B_ROSC3 struct{ mmio.U32 }

func (r *RTRNG90B_ROSC3) LoadBits(mask TRNG90B_ROSC3) TRNG90B_ROSC3 {
	return TRNG90B_ROSC3(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_ROSC3) StoreBits(mask, b TRNG90B_ROSC3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTRNG90B_ROSC3) SetBits(mask TRNG90B_ROSC3)      { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_ROSC3) ClearBits(mask TRNG90B_ROSC3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_ROSC3) Load() TRNG90B_ROSC3             { return TRNG90B_ROSC3(r.U32.Load()) }
func (r *RTRNG90B_ROSC3) Store(b TRNG90B_ROSC3)           { r.U32.Store(uint32(b)) }

type RMTRNG90B_ROSC3 struct{ mmio.UM32 }

func (rm RMTRNG90B_ROSC3) Load() TRNG90B_ROSC3   { return TRNG90B_ROSC3(rm.UM32.Load()) }
func (rm RMTRNG90B_ROSC3) Store(b TRNG90B_ROSC3) { rm.UM32.Store(uint32(b)) }

type TRNG90B_ROSC4 uint32

type RTRNG90B_ROSC4 struct{ mmio.U32 }

func (r *RTRNG90B_ROSC4) LoadBits(mask TRNG90B_ROSC4) TRNG90B_ROSC4 {
	return TRNG90B_ROSC4(r.U32.LoadBits(uint32(mask)))
}
func (r *RTRNG90B_ROSC4) StoreBits(mask, b TRNG90B_ROSC4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTRNG90B_ROSC4) SetBits(mask TRNG90B_ROSC4)      { r.U32.SetBits(uint32(mask)) }
func (r *RTRNG90B_ROSC4) ClearBits(mask TRNG90B_ROSC4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTRNG90B_ROSC4) Load() TRNG90B_ROSC4             { return TRNG90B_ROSC4(r.U32.Load()) }
func (r *RTRNG90B_ROSC4) Store(b TRNG90B_ROSC4)           { r.U32.Store(uint32(b)) }

type RMTRNG90B_ROSC4 struct{ mmio.UM32 }

func (rm RMTRNG90B_ROSC4) Load() TRNG90B_ROSC4   { return TRNG90B_ROSC4(rm.UM32.Load()) }
func (rm RMTRNG90B_ROSC4) Store(b TRNG90B_ROSC4) { rm.UM32.Store(uint32(b)) }
