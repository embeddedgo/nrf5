// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build nrf52840

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/nrf5/p/mmap"
)

type Periph struct {
	_          [321]uint32
	OUT        ROUT
	OUTSET     ROUTSET
	OUTCLR     ROUTCLR
	IN         RIN
	DIR        RDIR
	DIRSET     RDIRSET
	DIRCLR     RDIRCLR
	LATCH      RLATCH
	DETECTMODE RDETECTMODE
	_          [118]uint32
	PIN_CNF    [32]RPIN_CNF
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func P0() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.P0_BASE))) }
func P1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.P1_BASE))) }

type OUT uint32

type ROUT struct{ mmio.U32 }

func (r *ROUT) LoadBits(mask OUT) OUT { return OUT(r.U32.LoadBits(uint32(mask))) }
func (r *ROUT) StoreBits(mask, b OUT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUT) SetBits(mask OUT)      { r.U32.SetBits(uint32(mask)) }
func (r *ROUT) ClearBits(mask OUT)    { r.U32.ClearBits(uint32(mask)) }
func (r *ROUT) Load() OUT             { return OUT(r.U32.Load()) }
func (r *ROUT) Store(b OUT)           { r.U32.Store(uint32(b)) }

type RMOUT struct{ mmio.UM32 }

func (rm RMOUT) Load() OUT   { return OUT(rm.UM32.Load()) }
func (rm RMOUT) Store(b OUT) { rm.UM32.Store(uint32(b)) }

type OUTSET uint32

type ROUTSET struct{ mmio.U32 }

func (r *ROUTSET) LoadBits(mask OUTSET) OUTSET { return OUTSET(r.U32.LoadBits(uint32(mask))) }
func (r *ROUTSET) StoreBits(mask, b OUTSET)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUTSET) SetBits(mask OUTSET)         { r.U32.SetBits(uint32(mask)) }
func (r *ROUTSET) ClearBits(mask OUTSET)       { r.U32.ClearBits(uint32(mask)) }
func (r *ROUTSET) Load() OUTSET                { return OUTSET(r.U32.Load()) }
func (r *ROUTSET) Store(b OUTSET)              { r.U32.Store(uint32(b)) }

type RMOUTSET struct{ mmio.UM32 }

func (rm RMOUTSET) Load() OUTSET   { return OUTSET(rm.UM32.Load()) }
func (rm RMOUTSET) Store(b OUTSET) { rm.UM32.Store(uint32(b)) }

type OUTCLR uint32

type ROUTCLR struct{ mmio.U32 }

func (r *ROUTCLR) LoadBits(mask OUTCLR) OUTCLR { return OUTCLR(r.U32.LoadBits(uint32(mask))) }
func (r *ROUTCLR) StoreBits(mask, b OUTCLR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUTCLR) SetBits(mask OUTCLR)         { r.U32.SetBits(uint32(mask)) }
func (r *ROUTCLR) ClearBits(mask OUTCLR)       { r.U32.ClearBits(uint32(mask)) }
func (r *ROUTCLR) Load() OUTCLR                { return OUTCLR(r.U32.Load()) }
func (r *ROUTCLR) Store(b OUTCLR)              { r.U32.Store(uint32(b)) }

type RMOUTCLR struct{ mmio.UM32 }

func (rm RMOUTCLR) Load() OUTCLR   { return OUTCLR(rm.UM32.Load()) }
func (rm RMOUTCLR) Store(b OUTCLR) { rm.UM32.Store(uint32(b)) }

type IN uint32

type RIN struct{ mmio.U32 }

func (r *RIN) LoadBits(mask IN) IN  { return IN(r.U32.LoadBits(uint32(mask))) }
func (r *RIN) StoreBits(mask, b IN) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIN) SetBits(mask IN)      { r.U32.SetBits(uint32(mask)) }
func (r *RIN) ClearBits(mask IN)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIN) Load() IN             { return IN(r.U32.Load()) }
func (r *RIN) Store(b IN)           { r.U32.Store(uint32(b)) }

type RMIN struct{ mmio.UM32 }

func (rm RMIN) Load() IN   { return IN(rm.UM32.Load()) }
func (rm RMIN) Store(b IN) { rm.UM32.Store(uint32(b)) }

type DIR uint32

type RDIR struct{ mmio.U32 }

func (r *RDIR) LoadBits(mask DIR) DIR { return DIR(r.U32.LoadBits(uint32(mask))) }
func (r *RDIR) StoreBits(mask, b DIR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIR) SetBits(mask DIR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIR) ClearBits(mask DIR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIR) Load() DIR             { return DIR(r.U32.Load()) }
func (r *RDIR) Store(b DIR)           { r.U32.Store(uint32(b)) }

type RMDIR struct{ mmio.UM32 }

func (rm RMDIR) Load() DIR   { return DIR(rm.UM32.Load()) }
func (rm RMDIR) Store(b DIR) { rm.UM32.Store(uint32(b)) }

type DIRSET uint32

type RDIRSET struct{ mmio.U32 }

func (r *RDIRSET) LoadBits(mask DIRSET) DIRSET { return DIRSET(r.U32.LoadBits(uint32(mask))) }
func (r *RDIRSET) StoreBits(mask, b DIRSET)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIRSET) SetBits(mask DIRSET)         { r.U32.SetBits(uint32(mask)) }
func (r *RDIRSET) ClearBits(mask DIRSET)       { r.U32.ClearBits(uint32(mask)) }
func (r *RDIRSET) Load() DIRSET                { return DIRSET(r.U32.Load()) }
func (r *RDIRSET) Store(b DIRSET)              { r.U32.Store(uint32(b)) }

type RMDIRSET struct{ mmio.UM32 }

func (rm RMDIRSET) Load() DIRSET   { return DIRSET(rm.UM32.Load()) }
func (rm RMDIRSET) Store(b DIRSET) { rm.UM32.Store(uint32(b)) }

type DIRCLR uint32

type RDIRCLR struct{ mmio.U32 }

func (r *RDIRCLR) LoadBits(mask DIRCLR) DIRCLR { return DIRCLR(r.U32.LoadBits(uint32(mask))) }
func (r *RDIRCLR) StoreBits(mask, b DIRCLR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIRCLR) SetBits(mask DIRCLR)         { r.U32.SetBits(uint32(mask)) }
func (r *RDIRCLR) ClearBits(mask DIRCLR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RDIRCLR) Load() DIRCLR                { return DIRCLR(r.U32.Load()) }
func (r *RDIRCLR) Store(b DIRCLR)              { r.U32.Store(uint32(b)) }

type RMDIRCLR struct{ mmio.UM32 }

func (rm RMDIRCLR) Load() DIRCLR   { return DIRCLR(rm.UM32.Load()) }
func (rm RMDIRCLR) Store(b DIRCLR) { rm.UM32.Store(uint32(b)) }

type LATCH uint32

type RLATCH struct{ mmio.U32 }

func (r *RLATCH) LoadBits(mask LATCH) LATCH { return LATCH(r.U32.LoadBits(uint32(mask))) }
func (r *RLATCH) StoreBits(mask, b LATCH)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLATCH) SetBits(mask LATCH)        { r.U32.SetBits(uint32(mask)) }
func (r *RLATCH) ClearBits(mask LATCH)      { r.U32.ClearBits(uint32(mask)) }
func (r *RLATCH) Load() LATCH               { return LATCH(r.U32.Load()) }
func (r *RLATCH) Store(b LATCH)             { r.U32.Store(uint32(b)) }

type RMLATCH struct{ mmio.UM32 }

func (rm RMLATCH) Load() LATCH   { return LATCH(rm.UM32.Load()) }
func (rm RMLATCH) Store(b LATCH) { rm.UM32.Store(uint32(b)) }

type DETECTMODE uint32

type RDETECTMODE struct{ mmio.U32 }

func (r *RDETECTMODE) LoadBits(mask DETECTMODE) DETECTMODE {
	return DETECTMODE(r.U32.LoadBits(uint32(mask)))
}
func (r *RDETECTMODE) StoreBits(mask, b DETECTMODE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDETECTMODE) SetBits(mask DETECTMODE)      { r.U32.SetBits(uint32(mask)) }
func (r *RDETECTMODE) ClearBits(mask DETECTMODE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDETECTMODE) Load() DETECTMODE             { return DETECTMODE(r.U32.Load()) }
func (r *RDETECTMODE) Store(b DETECTMODE)           { r.U32.Store(uint32(b)) }

type RMDETECTMODE struct{ mmio.UM32 }

func (rm RMDETECTMODE) Load() DETECTMODE   { return DETECTMODE(rm.UM32.Load()) }
func (rm RMDETECTMODE) Store(b DETECTMODE) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LDETECT() RMDETECTMODE {
	return RMDETECTMODE{mmio.UM32{&p.DETECTMODE.U32, uint32(LDETECT)}}
}

type PIN_CNF uint32

type RPIN_CNF struct{ mmio.U32 }

func (r *RPIN_CNF) LoadBits(mask PIN_CNF) PIN_CNF { return PIN_CNF(r.U32.LoadBits(uint32(mask))) }
func (r *RPIN_CNF) StoreBits(mask, b PIN_CNF)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPIN_CNF) SetBits(mask PIN_CNF)          { r.U32.SetBits(uint32(mask)) }
func (r *RPIN_CNF) ClearBits(mask PIN_CNF)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPIN_CNF) Load() PIN_CNF                 { return PIN_CNF(r.U32.Load()) }
func (r *RPIN_CNF) Store(b PIN_CNF)               { r.U32.Store(uint32(b)) }

type RMPIN_CNF struct{ mmio.UM32 }

func (rm RMPIN_CNF) Load() PIN_CNF   { return PIN_CNF(rm.UM32.Load()) }
func (rm RMPIN_CNF) Store(b PIN_CNF) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DIRECTION(n int) RMPIN_CNF {
	return RMPIN_CNF{mmio.UM32{&p.PIN_CNF[n].U32, uint32(DIRECTION)}}
}

func (p *Periph) INPUT(n int) RMPIN_CNF {
	return RMPIN_CNF{mmio.UM32{&p.PIN_CNF[n].U32, uint32(INPUT)}}
}

func (p *Periph) PULL(n int) RMPIN_CNF {
	return RMPIN_CNF{mmio.UM32{&p.PIN_CNF[n].U32, uint32(PULL)}}
}

func (p *Periph) DRIVE(n int) RMPIN_CNF {
	return RMPIN_CNF{mmio.UM32{&p.PIN_CNF[n].U32, uint32(DRIVE)}}
}

func (p *Periph) SENSE(n int) RMPIN_CNF {
	return RMPIN_CNF{mmio.UM32{&p.PIN_CNF[n].U32, uint32(SENSE)}}
}
